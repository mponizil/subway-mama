// Generated by the protocol buffer compiler.  DO NOT EDIT!

#import "GtfsRealtime.pb.h"
// @@protoc_insertion_point(imports)

@implementation GtfsRealtimeRoot
static PBExtensionRegistry* extensionRegistry = nil;
+ (PBExtensionRegistry*) extensionRegistry {
  return extensionRegistry;
}

+ (void) initialize {
  if (self == [GtfsRealtimeRoot class]) {
    PBMutableExtensionRegistry* registry = [PBMutableExtensionRegistry registry];
    [self registerAllExtensions:registry];
    extensionRegistry = registry;
  }
}
+ (void) registerAllExtensions:(PBMutableExtensionRegistry*) registry {
}
@end

@interface FeedMessage ()
@property (strong) FeedHeader* header;
@property (strong) NSMutableArray * entityArray;
@end

@implementation FeedMessage

- (BOOL) hasHeader {
  return !!hasHeader_;
}
- (void) setHasHeader:(BOOL) value_ {
  hasHeader_ = !!value_;
}
@synthesize header;
@synthesize entityArray;
@dynamic entity;
- (id) init {
  if ((self = [super init])) {
    self.header = [FeedHeader defaultInstance];
  }
  return self;
}
static FeedMessage* defaultFeedMessageInstance = nil;
+ (void) initialize {
  if (self == [FeedMessage class]) {
    defaultFeedMessageInstance = [[FeedMessage alloc] init];
  }
}
+ (FeedMessage*) defaultInstance {
  return defaultFeedMessageInstance;
}
- (FeedMessage*) defaultInstance {
  return defaultFeedMessageInstance;
}
- (NSArray *)entity {
  return entityArray;
}
- (FeedEntity*)entityAtIndex:(NSUInteger)index {
  return [entityArray objectAtIndex:index];
}
- (BOOL) isInitialized {
  if (!self.hasHeader) {
    return NO;
  }
  if (!self.header.isInitialized) {
    return NO;
  }
  __block BOOL isInitentity = YES;
   [self.entity enumerateObjectsUsingBlock:^(FeedEntity *element, NSUInteger idx, BOOL *stop) {
    if (!element.isInitialized) {
      isInitentity = NO;
      *stop = YES;
    }
  }];
  if (!isInitentity) return isInitentity;
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasHeader) {
    [output writeMessage:1 value:self.header];
  }
  [self.entityArray enumerateObjectsUsingBlock:^(FeedEntity *element, NSUInteger idx, BOOL *stop) {
    [output writeMessage:2 value:element];
  }];
  [self.unknownFields writeToCodedOutputStream:output];
}
- (SInt32) serializedSize {
  __block SInt32 size_ = memoizedSerializedSize;
  if (size_ != -1) {
    return size_;
  }

  size_ = 0;
  if (self.hasHeader) {
    size_ += computeMessageSize(1, self.header);
  }
  [self.entityArray enumerateObjectsUsingBlock:^(FeedEntity *element, NSUInteger idx, BOOL *stop) {
    size_ += computeMessageSize(2, element);
  }];
  size_ += self.unknownFields.serializedSize;
  memoizedSerializedSize = size_;
  return size_;
}
+ (FeedMessage*) parseFromData:(NSData*) data {
  return (FeedMessage*)[[[FeedMessage builder] mergeFromData:data] build];
}
+ (FeedMessage*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (FeedMessage*)[[[FeedMessage builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (FeedMessage*) parseFromInputStream:(NSInputStream*) input {
  return (FeedMessage*)[[[FeedMessage builder] mergeFromInputStream:input] build];
}
+ (FeedMessage*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (FeedMessage*)[[[FeedMessage builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (FeedMessage*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (FeedMessage*)[[[FeedMessage builder] mergeFromCodedInputStream:input] build];
}
+ (FeedMessage*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (FeedMessage*)[[[FeedMessage builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (FeedMessageBuilder*) builder {
  return [[FeedMessageBuilder alloc] init];
}
+ (FeedMessageBuilder*) builderWithPrototype:(FeedMessage*) prototype {
  return [[FeedMessage builder] mergeFrom:prototype];
}
- (FeedMessageBuilder*) builder {
  return [FeedMessage builder];
}
- (FeedMessageBuilder*) toBuilder {
  return [FeedMessage builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  if (self.hasHeader) {
    [output appendFormat:@"%@%@ {\n", indent, @"header"];
    [self.header writeDescriptionTo:output
                         withIndent:[NSString stringWithFormat:@"%@  ", indent]];
    [output appendFormat:@"%@}\n", indent];
  }
  [self.entityArray enumerateObjectsUsingBlock:^(FeedEntity *element, NSUInteger idx, BOOL *stop) {
    [output appendFormat:@"%@%@ {\n", indent, @"entity"];
    [element writeDescriptionTo:output
                     withIndent:[NSString stringWithFormat:@"%@  ", indent]];
    [output appendFormat:@"%@}\n", indent];
  }];
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[FeedMessage class]]) {
    return NO;
  }
  FeedMessage *otherMessage = other;
  return
      self.hasHeader == otherMessage.hasHeader &&
      (!self.hasHeader || [self.header isEqual:otherMessage.header]) &&
      [self.entityArray isEqualToArray:otherMessage.entityArray] &&
      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  __block NSUInteger hashCode = 7;
  if (self.hasHeader) {
    hashCode = hashCode * 31 + [self.header hash];
  }
  [self.entityArray enumerateObjectsUsingBlock:^(FeedEntity *element, NSUInteger idx, BOOL *stop) {
    hashCode = hashCode * 31 + [element hash];
  }];
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

@interface FeedMessageBuilder()
@property (strong) FeedMessage* result;
@end

@implementation FeedMessageBuilder
@synthesize result;
- (id) init {
  if ((self = [super init])) {
    self.result = [[FeedMessage alloc] init];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return result;
}
- (FeedMessageBuilder*) clear {
  self.result = [[FeedMessage alloc] init];
  return self;
}
- (FeedMessageBuilder*) clone {
  return [FeedMessage builderWithPrototype:result];
}
- (FeedMessage*) defaultInstance {
  return [FeedMessage defaultInstance];
}
- (FeedMessage*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (FeedMessage*) buildPartial {
  FeedMessage* returnMe = result;
  self.result = nil;
  return returnMe;
}
- (FeedMessageBuilder*) mergeFrom:(FeedMessage*) other {
  if (other == [FeedMessage defaultInstance]) {
    return self;
  }
  if (other.hasHeader) {
    [self mergeHeader:other.header];
  }
  if (other.entityArray.count > 0) {
    if (result.entityArray == nil) {
      result.entityArray = [[NSMutableArray alloc] initWithArray:other.entityArray];
    } else {
      [result.entityArray addObjectsFromArray:other.entityArray];
    }
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (FeedMessageBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (FeedMessageBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSetBuilder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    SInt32 tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 10: {
        FeedHeaderBuilder* subBuilder = [FeedHeader builder];
        if (self.hasHeader) {
          [subBuilder mergeFrom:self.header];
        }
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self setHeader:[subBuilder buildPartial]];
        break;
      }
      case 18: {
        FeedEntityBuilder* subBuilder = [FeedEntity builder];
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self addEntity:[subBuilder buildPartial]];
        break;
      }
    }
  }
}
- (BOOL) hasHeader {
  return result.hasHeader;
}
- (FeedHeader*) header {
  return result.header;
}
- (FeedMessageBuilder*) setHeader:(FeedHeader*) value {
  result.hasHeader = YES;
  result.header = value;
  return self;
}
- (FeedMessageBuilder*) setHeaderBuilder:(FeedHeaderBuilder*) builderForValue {
  return [self setHeader:[builderForValue build]];
}
- (FeedMessageBuilder*) mergeHeader:(FeedHeader*) value {
  if (result.hasHeader &&
      result.header != [FeedHeader defaultInstance]) {
    result.header =
      [[[FeedHeader builderWithPrototype:result.header] mergeFrom:value] buildPartial];
  } else {
    result.header = value;
  }
  result.hasHeader = YES;
  return self;
}
- (FeedMessageBuilder*) clearHeader {
  result.hasHeader = NO;
  result.header = [FeedHeader defaultInstance];
  return self;
}
- (NSMutableArray *)entity {
  return result.entityArray;
}
- (FeedEntity*)entityAtIndex:(NSUInteger)index {
  return [result entityAtIndex:index];
}
- (FeedMessageBuilder *)addEntity:(FeedEntity*)value {
  if (result.entityArray == nil) {
    result.entityArray = [[NSMutableArray alloc]init];
  }
  [result.entityArray addObject:value];
  return self;
}
- (FeedMessageBuilder *)setEntityArray:(NSArray *)array {
  result.entityArray = [[NSMutableArray alloc]initWithArray:array];
  return self;
}
- (FeedMessageBuilder *)clearEntity {
  result.entityArray = nil;
  return self;
}
@end

@interface FeedHeader ()
@property (strong) NSString* gtfsRealtimeVersion;
@property FeedHeaderIncrementality incrementality;
@property UInt64 timestamp;
@end

@implementation FeedHeader

- (BOOL) hasGtfsRealtimeVersion {
  return !!hasGtfsRealtimeVersion_;
}
- (void) setHasGtfsRealtimeVersion:(BOOL) value_ {
  hasGtfsRealtimeVersion_ = !!value_;
}
@synthesize gtfsRealtimeVersion;
- (BOOL) hasIncrementality {
  return !!hasIncrementality_;
}
- (void) setHasIncrementality:(BOOL) value_ {
  hasIncrementality_ = !!value_;
}
@synthesize incrementality;
- (BOOL) hasTimestamp {
  return !!hasTimestamp_;
}
- (void) setHasTimestamp:(BOOL) value_ {
  hasTimestamp_ = !!value_;
}
@synthesize timestamp;
- (id) init {
  if ((self = [super init])) {
    self.gtfsRealtimeVersion = @"";
    self.incrementality = FeedHeaderIncrementalityFullDataset;
    self.timestamp = 0L;
  }
  return self;
}
static FeedHeader* defaultFeedHeaderInstance = nil;
+ (void) initialize {
  if (self == [FeedHeader class]) {
    defaultFeedHeaderInstance = [[FeedHeader alloc] init];
  }
}
+ (FeedHeader*) defaultInstance {
  return defaultFeedHeaderInstance;
}
- (FeedHeader*) defaultInstance {
  return defaultFeedHeaderInstance;
}
- (BOOL) isInitialized {
  if (!self.hasGtfsRealtimeVersion) {
    return NO;
  }
  if (!self.extensionsAreInitialized) {
    return NO;
  }
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasGtfsRealtimeVersion) {
    [output writeString:1 value:self.gtfsRealtimeVersion];
  }
  if (self.hasIncrementality) {
    [output writeEnum:2 value:self.incrementality];
  }
  if (self.hasTimestamp) {
    [output writeUInt64:3 value:self.timestamp];
  }
  [self writeExtensionsToCodedOutputStream:output
                                      from:1000
                                        to:2000];
  [self.unknownFields writeToCodedOutputStream:output];
}
- (SInt32) serializedSize {
  __block SInt32 size_ = memoizedSerializedSize;
  if (size_ != -1) {
    return size_;
  }

  size_ = 0;
  if (self.hasGtfsRealtimeVersion) {
    size_ += computeStringSize(1, self.gtfsRealtimeVersion);
  }
  if (self.hasIncrementality) {
    size_ += computeEnumSize(2, self.incrementality);
  }
  if (self.hasTimestamp) {
    size_ += computeUInt64Size(3, self.timestamp);
  }
  size_ += [self extensionsSerializedSize];
  size_ += self.unknownFields.serializedSize;
  memoizedSerializedSize = size_;
  return size_;
}
+ (FeedHeader*) parseFromData:(NSData*) data {
  return (FeedHeader*)[[[FeedHeader builder] mergeFromData:data] build];
}
+ (FeedHeader*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (FeedHeader*)[[[FeedHeader builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (FeedHeader*) parseFromInputStream:(NSInputStream*) input {
  return (FeedHeader*)[[[FeedHeader builder] mergeFromInputStream:input] build];
}
+ (FeedHeader*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (FeedHeader*)[[[FeedHeader builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (FeedHeader*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (FeedHeader*)[[[FeedHeader builder] mergeFromCodedInputStream:input] build];
}
+ (FeedHeader*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (FeedHeader*)[[[FeedHeader builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (FeedHeaderBuilder*) builder {
  return [[FeedHeaderBuilder alloc] init];
}
+ (FeedHeaderBuilder*) builderWithPrototype:(FeedHeader*) prototype {
  return [[FeedHeader builder] mergeFrom:prototype];
}
- (FeedHeaderBuilder*) builder {
  return [FeedHeader builder];
}
- (FeedHeaderBuilder*) toBuilder {
  return [FeedHeader builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  if (self.hasGtfsRealtimeVersion) {
    [output appendFormat:@"%@%@: %@\n", indent, @"gtfsRealtimeVersion", self.gtfsRealtimeVersion];
  }
  if (self.hasIncrementality) {
    [output appendFormat:@"%@%@: %d\n", indent, @"incrementality", self.incrementality];
  }
  if (self.hasTimestamp) {
    [output appendFormat:@"%@%@: %@\n", indent, @"timestamp", [NSNumber numberWithLongLong:self.timestamp]];
  }
  [self writeExtensionDescriptionToMutableString:(NSMutableString*)output
                                            from:1000
                                              to:2000
                                      withIndent:indent];
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[FeedHeader class]]) {
    return NO;
  }
  FeedHeader *otherMessage = other;
  return
      self.hasGtfsRealtimeVersion == otherMessage.hasGtfsRealtimeVersion &&
      (!self.hasGtfsRealtimeVersion || [self.gtfsRealtimeVersion isEqual:otherMessage.gtfsRealtimeVersion]) &&
      self.hasIncrementality == otherMessage.hasIncrementality &&
      (!self.hasIncrementality || self.incrementality == otherMessage.incrementality) &&
      self.hasTimestamp == otherMessage.hasTimestamp &&
      (!self.hasTimestamp || self.timestamp == otherMessage.timestamp) &&
      [self isEqualExtensionsInOther:otherMessage from:1000 to:2000] &&

      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  __block NSUInteger hashCode = 7;
  if (self.hasGtfsRealtimeVersion) {
    hashCode = hashCode * 31 + [self.gtfsRealtimeVersion hash];
  }
  if (self.hasIncrementality) {
    hashCode = hashCode * 31 + self.incrementality;
  }
  if (self.hasTimestamp) {
    hashCode = hashCode * 31 + [[NSNumber numberWithLongLong:self.timestamp] hash];
  }
  hashCode = hashCode * 31 + [self hashExtensionsFrom:1000 to:2000];
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

BOOL FeedHeaderIncrementalityIsValidValue(FeedHeaderIncrementality value) {
  switch (value) {
    case FeedHeaderIncrementalityFullDataset:
    case FeedHeaderIncrementalityDifferential:
      return YES;
    default:
      return NO;
  }
}
@interface FeedHeaderBuilder()
@property (strong) FeedHeader* result;
@end

@implementation FeedHeaderBuilder
@synthesize result;
- (id) init {
  if ((self = [super init])) {
    self.result = [[FeedHeader alloc] init];
  }
  return self;
}
- (PBExtendableMessage*) internalGetResult {
  return result;
}
- (FeedHeaderBuilder*) clear {
  self.result = [[FeedHeader alloc] init];
  return self;
}
- (FeedHeaderBuilder*) clone {
  return [FeedHeader builderWithPrototype:result];
}
- (FeedHeader*) defaultInstance {
  return [FeedHeader defaultInstance];
}
- (FeedHeader*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (FeedHeader*) buildPartial {
  FeedHeader* returnMe = result;
  self.result = nil;
  return returnMe;
}
- (FeedHeaderBuilder*) mergeFrom:(FeedHeader*) other {
  if (other == [FeedHeader defaultInstance]) {
    return self;
  }
  if (other.hasGtfsRealtimeVersion) {
    [self setGtfsRealtimeVersion:other.gtfsRealtimeVersion];
  }
  if (other.hasIncrementality) {
    [self setIncrementality:other.incrementality];
  }
  if (other.hasTimestamp) {
    [self setTimestamp:other.timestamp];
  }
  [self mergeExtensionFields:other];
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (FeedHeaderBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (FeedHeaderBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSetBuilder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    SInt32 tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 10: {
        [self setGtfsRealtimeVersion:[input readString]];
        break;
      }
      case 16: {
        FeedHeaderIncrementality value = (FeedHeaderIncrementality)[input readEnum];
        if (FeedHeaderIncrementalityIsValidValue(value)) {
          [self setIncrementality:value];
        } else {
          [unknownFields mergeVarintField:2 value:value];
        }
        break;
      }
      case 24: {
        [self setTimestamp:[input readUInt64]];
        break;
      }
    }
  }
}
- (BOOL) hasGtfsRealtimeVersion {
  return result.hasGtfsRealtimeVersion;
}
- (NSString*) gtfsRealtimeVersion {
  return result.gtfsRealtimeVersion;
}
- (FeedHeaderBuilder*) setGtfsRealtimeVersion:(NSString*) value {
  result.hasGtfsRealtimeVersion = YES;
  result.gtfsRealtimeVersion = value;
  return self;
}
- (FeedHeaderBuilder*) clearGtfsRealtimeVersion {
  result.hasGtfsRealtimeVersion = NO;
  result.gtfsRealtimeVersion = @"";
  return self;
}
- (BOOL) hasIncrementality {
  return result.hasIncrementality;
}
- (FeedHeaderIncrementality) incrementality {
  return result.incrementality;
}
- (FeedHeaderBuilder*) setIncrementality:(FeedHeaderIncrementality) value {
  result.hasIncrementality = YES;
  result.incrementality = value;
  return self;
}
- (FeedHeaderBuilder*) clearIncrementality {
  result.hasIncrementality = NO;
  result.incrementality = FeedHeaderIncrementalityFullDataset;
  return self;
}
- (BOOL) hasTimestamp {
  return result.hasTimestamp;
}
- (UInt64) timestamp {
  return result.timestamp;
}
- (FeedHeaderBuilder*) setTimestamp:(UInt64) value {
  result.hasTimestamp = YES;
  result.timestamp = value;
  return self;
}
- (FeedHeaderBuilder*) clearTimestamp {
  result.hasTimestamp = NO;
  result.timestamp = 0L;
  return self;
}
@end

@interface FeedEntity ()
@property (strong) NSString* id;
@property BOOL isDeleted;
@property (strong) TripUpdate* tripUpdate;
@property (strong) VehiclePosition* vehicle;
@property (strong) Alert* alert;
@end

@implementation FeedEntity

- (BOOL) hasId {
  return !!hasId_;
}
- (void) setHasId:(BOOL) value_ {
  hasId_ = !!value_;
}
@synthesize id;
- (BOOL) hasIsDeleted {
  return !!hasIsDeleted_;
}
- (void) setHasIsDeleted:(BOOL) value_ {
  hasIsDeleted_ = !!value_;
}
- (BOOL) isDeleted {
  return !!isDeleted_;
}
- (void) setIsDeleted:(BOOL) value_ {
  isDeleted_ = !!value_;
}
- (BOOL) hasTripUpdate {
  return !!hasTripUpdate_;
}
- (void) setHasTripUpdate:(BOOL) value_ {
  hasTripUpdate_ = !!value_;
}
@synthesize tripUpdate;
- (BOOL) hasVehicle {
  return !!hasVehicle_;
}
- (void) setHasVehicle:(BOOL) value_ {
  hasVehicle_ = !!value_;
}
@synthesize vehicle;
- (BOOL) hasAlert {
  return !!hasAlert_;
}
- (void) setHasAlert:(BOOL) value_ {
  hasAlert_ = !!value_;
}
@synthesize alert;
- (id) init {
  if ((self = [super init])) {
    self.id = @"";
    self.isDeleted = NO;
    self.tripUpdate = [TripUpdate defaultInstance];
    self.vehicle = [VehiclePosition defaultInstance];
    self.alert = [Alert defaultInstance];
  }
  return self;
}
static FeedEntity* defaultFeedEntityInstance = nil;
+ (void) initialize {
  if (self == [FeedEntity class]) {
    defaultFeedEntityInstance = [[FeedEntity alloc] init];
  }
}
+ (FeedEntity*) defaultInstance {
  return defaultFeedEntityInstance;
}
- (FeedEntity*) defaultInstance {
  return defaultFeedEntityInstance;
}
- (BOOL) isInitialized {
  if (!self.hasId) {
    return NO;
  }
  if (self.hasTripUpdate) {
    if (!self.tripUpdate.isInitialized) {
      return NO;
    }
  }
  if (self.hasVehicle) {
    if (!self.vehicle.isInitialized) {
      return NO;
    }
  }
  if (self.hasAlert) {
    if (!self.alert.isInitialized) {
      return NO;
    }
  }
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasId) {
    [output writeString:1 value:self.id];
  }
  if (self.hasIsDeleted) {
    [output writeBool:2 value:self.isDeleted];
  }
  if (self.hasTripUpdate) {
    [output writeMessage:3 value:self.tripUpdate];
  }
  if (self.hasVehicle) {
    [output writeMessage:4 value:self.vehicle];
  }
  if (self.hasAlert) {
    [output writeMessage:5 value:self.alert];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (SInt32) serializedSize {
  __block SInt32 size_ = memoizedSerializedSize;
  if (size_ != -1) {
    return size_;
  }

  size_ = 0;
  if (self.hasId) {
    size_ += computeStringSize(1, self.id);
  }
  if (self.hasIsDeleted) {
    size_ += computeBoolSize(2, self.isDeleted);
  }
  if (self.hasTripUpdate) {
    size_ += computeMessageSize(3, self.tripUpdate);
  }
  if (self.hasVehicle) {
    size_ += computeMessageSize(4, self.vehicle);
  }
  if (self.hasAlert) {
    size_ += computeMessageSize(5, self.alert);
  }
  size_ += self.unknownFields.serializedSize;
  memoizedSerializedSize = size_;
  return size_;
}
+ (FeedEntity*) parseFromData:(NSData*) data {
  return (FeedEntity*)[[[FeedEntity builder] mergeFromData:data] build];
}
+ (FeedEntity*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (FeedEntity*)[[[FeedEntity builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (FeedEntity*) parseFromInputStream:(NSInputStream*) input {
  return (FeedEntity*)[[[FeedEntity builder] mergeFromInputStream:input] build];
}
+ (FeedEntity*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (FeedEntity*)[[[FeedEntity builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (FeedEntity*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (FeedEntity*)[[[FeedEntity builder] mergeFromCodedInputStream:input] build];
}
+ (FeedEntity*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (FeedEntity*)[[[FeedEntity builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (FeedEntityBuilder*) builder {
  return [[FeedEntityBuilder alloc] init];
}
+ (FeedEntityBuilder*) builderWithPrototype:(FeedEntity*) prototype {
  return [[FeedEntity builder] mergeFrom:prototype];
}
- (FeedEntityBuilder*) builder {
  return [FeedEntity builder];
}
- (FeedEntityBuilder*) toBuilder {
  return [FeedEntity builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  if (self.hasId) {
    [output appendFormat:@"%@%@: %@\n", indent, @"id", self.id];
  }
  if (self.hasIsDeleted) {
    [output appendFormat:@"%@%@: %@\n", indent, @"isDeleted", [NSNumber numberWithBool:self.isDeleted]];
  }
  if (self.hasTripUpdate) {
    [output appendFormat:@"%@%@ {\n", indent, @"tripUpdate"];
    [self.tripUpdate writeDescriptionTo:output
                         withIndent:[NSString stringWithFormat:@"%@  ", indent]];
    [output appendFormat:@"%@}\n", indent];
  }
  if (self.hasVehicle) {
    [output appendFormat:@"%@%@ {\n", indent, @"vehicle"];
    [self.vehicle writeDescriptionTo:output
                         withIndent:[NSString stringWithFormat:@"%@  ", indent]];
    [output appendFormat:@"%@}\n", indent];
  }
  if (self.hasAlert) {
    [output appendFormat:@"%@%@ {\n", indent, @"alert"];
    [self.alert writeDescriptionTo:output
                         withIndent:[NSString stringWithFormat:@"%@  ", indent]];
    [output appendFormat:@"%@}\n", indent];
  }
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[FeedEntity class]]) {
    return NO;
  }
  FeedEntity *otherMessage = other;
  return
      self.hasId == otherMessage.hasId &&
      (!self.hasId || [self.id isEqual:otherMessage.id]) &&
      self.hasIsDeleted == otherMessage.hasIsDeleted &&
      (!self.hasIsDeleted || self.isDeleted == otherMessage.isDeleted) &&
      self.hasTripUpdate == otherMessage.hasTripUpdate &&
      (!self.hasTripUpdate || [self.tripUpdate isEqual:otherMessage.tripUpdate]) &&
      self.hasVehicle == otherMessage.hasVehicle &&
      (!self.hasVehicle || [self.vehicle isEqual:otherMessage.vehicle]) &&
      self.hasAlert == otherMessage.hasAlert &&
      (!self.hasAlert || [self.alert isEqual:otherMessage.alert]) &&
      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  __block NSUInteger hashCode = 7;
  if (self.hasId) {
    hashCode = hashCode * 31 + [self.id hash];
  }
  if (self.hasIsDeleted) {
    hashCode = hashCode * 31 + [[NSNumber numberWithBool:self.isDeleted] hash];
  }
  if (self.hasTripUpdate) {
    hashCode = hashCode * 31 + [self.tripUpdate hash];
  }
  if (self.hasVehicle) {
    hashCode = hashCode * 31 + [self.vehicle hash];
  }
  if (self.hasAlert) {
    hashCode = hashCode * 31 + [self.alert hash];
  }
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

@interface FeedEntityBuilder()
@property (strong) FeedEntity* result;
@end

@implementation FeedEntityBuilder
@synthesize result;
- (id) init {
  if ((self = [super init])) {
    self.result = [[FeedEntity alloc] init];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return result;
}
- (FeedEntityBuilder*) clear {
  self.result = [[FeedEntity alloc] init];
  return self;
}
- (FeedEntityBuilder*) clone {
  return [FeedEntity builderWithPrototype:result];
}
- (FeedEntity*) defaultInstance {
  return [FeedEntity defaultInstance];
}
- (FeedEntity*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (FeedEntity*) buildPartial {
  FeedEntity* returnMe = result;
  self.result = nil;
  return returnMe;
}
- (FeedEntityBuilder*) mergeFrom:(FeedEntity*) other {
  if (other == [FeedEntity defaultInstance]) {
    return self;
  }
  if (other.hasId) {
    [self setId:other.id];
  }
  if (other.hasIsDeleted) {
    [self setIsDeleted:other.isDeleted];
  }
  if (other.hasTripUpdate) {
    [self mergeTripUpdate:other.tripUpdate];
  }
  if (other.hasVehicle) {
    [self mergeVehicle:other.vehicle];
  }
  if (other.hasAlert) {
    [self mergeAlert:other.alert];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (FeedEntityBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (FeedEntityBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSetBuilder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    SInt32 tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 10: {
        [self setId:[input readString]];
        break;
      }
      case 16: {
        [self setIsDeleted:[input readBool]];
        break;
      }
      case 26: {
        TripUpdateBuilder* subBuilder = [TripUpdate builder];
        if (self.hasTripUpdate) {
          [subBuilder mergeFrom:self.tripUpdate];
        }
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self setTripUpdate:[subBuilder buildPartial]];
        break;
      }
      case 34: {
        VehiclePositionBuilder* subBuilder = [VehiclePosition builder];
        if (self.hasVehicle) {
          [subBuilder mergeFrom:self.vehicle];
        }
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self setVehicle:[subBuilder buildPartial]];
        break;
      }
      case 42: {
        AlertBuilder* subBuilder = [Alert builder];
        if (self.hasAlert) {
          [subBuilder mergeFrom:self.alert];
        }
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self setAlert:[subBuilder buildPartial]];
        break;
      }
    }
  }
}
- (BOOL) hasId {
  return result.hasId;
}
- (NSString*) id {
  return result.id;
}
- (FeedEntityBuilder*) setId:(NSString*) value {
  result.hasId = YES;
  result.id = value;
  return self;
}
- (FeedEntityBuilder*) clearId {
  result.hasId = NO;
  result.id = @"";
  return self;
}
- (BOOL) hasIsDeleted {
  return result.hasIsDeleted;
}
- (BOOL) isDeleted {
  return result.isDeleted;
}
- (FeedEntityBuilder*) setIsDeleted:(BOOL) value {
  result.hasIsDeleted = YES;
  result.isDeleted = value;
  return self;
}
- (FeedEntityBuilder*) clearIsDeleted {
  result.hasIsDeleted = NO;
  result.isDeleted = NO;
  return self;
}
- (BOOL) hasTripUpdate {
  return result.hasTripUpdate;
}
- (TripUpdate*) tripUpdate {
  return result.tripUpdate;
}
- (FeedEntityBuilder*) setTripUpdate:(TripUpdate*) value {
  result.hasTripUpdate = YES;
  result.tripUpdate = value;
  return self;
}
- (FeedEntityBuilder*) setTripUpdateBuilder:(TripUpdateBuilder*) builderForValue {
  return [self setTripUpdate:[builderForValue build]];
}
- (FeedEntityBuilder*) mergeTripUpdate:(TripUpdate*) value {
  if (result.hasTripUpdate &&
      result.tripUpdate != [TripUpdate defaultInstance]) {
    result.tripUpdate =
      [[[TripUpdate builderWithPrototype:result.tripUpdate] mergeFrom:value] buildPartial];
  } else {
    result.tripUpdate = value;
  }
  result.hasTripUpdate = YES;
  return self;
}
- (FeedEntityBuilder*) clearTripUpdate {
  result.hasTripUpdate = NO;
  result.tripUpdate = [TripUpdate defaultInstance];
  return self;
}
- (BOOL) hasVehicle {
  return result.hasVehicle;
}
- (VehiclePosition*) vehicle {
  return result.vehicle;
}
- (FeedEntityBuilder*) setVehicle:(VehiclePosition*) value {
  result.hasVehicle = YES;
  result.vehicle = value;
  return self;
}
- (FeedEntityBuilder*) setVehicleBuilder:(VehiclePositionBuilder*) builderForValue {
  return [self setVehicle:[builderForValue build]];
}
- (FeedEntityBuilder*) mergeVehicle:(VehiclePosition*) value {
  if (result.hasVehicle &&
      result.vehicle != [VehiclePosition defaultInstance]) {
    result.vehicle =
      [[[VehiclePosition builderWithPrototype:result.vehicle] mergeFrom:value] buildPartial];
  } else {
    result.vehicle = value;
  }
  result.hasVehicle = YES;
  return self;
}
- (FeedEntityBuilder*) clearVehicle {
  result.hasVehicle = NO;
  result.vehicle = [VehiclePosition defaultInstance];
  return self;
}
- (BOOL) hasAlert {
  return result.hasAlert;
}
- (Alert*) alert {
  return result.alert;
}
- (FeedEntityBuilder*) setAlert:(Alert*) value {
  result.hasAlert = YES;
  result.alert = value;
  return self;
}
- (FeedEntityBuilder*) setAlertBuilder:(AlertBuilder*) builderForValue {
  return [self setAlert:[builderForValue build]];
}
- (FeedEntityBuilder*) mergeAlert:(Alert*) value {
  if (result.hasAlert &&
      result.alert != [Alert defaultInstance]) {
    result.alert =
      [[[Alert builderWithPrototype:result.alert] mergeFrom:value] buildPartial];
  } else {
    result.alert = value;
  }
  result.hasAlert = YES;
  return self;
}
- (FeedEntityBuilder*) clearAlert {
  result.hasAlert = NO;
  result.alert = [Alert defaultInstance];
  return self;
}
@end

@interface TripUpdate ()
@property (strong) TripDescriptor* trip;
@property (strong) VehicleDescriptor* vehicle;
@property (strong) NSMutableArray * stopTimeUpdateArray;
@property UInt64 timestamp;
@end

@implementation TripUpdate

- (BOOL) hasTrip {
  return !!hasTrip_;
}
- (void) setHasTrip:(BOOL) value_ {
  hasTrip_ = !!value_;
}
@synthesize trip;
- (BOOL) hasVehicle {
  return !!hasVehicle_;
}
- (void) setHasVehicle:(BOOL) value_ {
  hasVehicle_ = !!value_;
}
@synthesize vehicle;
@synthesize stopTimeUpdateArray;
@dynamic stopTimeUpdate;
- (BOOL) hasTimestamp {
  return !!hasTimestamp_;
}
- (void) setHasTimestamp:(BOOL) value_ {
  hasTimestamp_ = !!value_;
}
@synthesize timestamp;
- (id) init {
  if ((self = [super init])) {
    self.trip = [TripDescriptor defaultInstance];
    self.vehicle = [VehicleDescriptor defaultInstance];
    self.timestamp = 0L;
  }
  return self;
}
static TripUpdate* defaultTripUpdateInstance = nil;
+ (void) initialize {
  if (self == [TripUpdate class]) {
    defaultTripUpdateInstance = [[TripUpdate alloc] init];
  }
}
+ (TripUpdate*) defaultInstance {
  return defaultTripUpdateInstance;
}
- (TripUpdate*) defaultInstance {
  return defaultTripUpdateInstance;
}
- (NSArray *)stopTimeUpdate {
  return stopTimeUpdateArray;
}
- (TripUpdateStopTimeUpdate*)stopTimeUpdateAtIndex:(NSUInteger)index {
  return [stopTimeUpdateArray objectAtIndex:index];
}
- (BOOL) isInitialized {
  if (!self.hasTrip) {
    return NO;
  }
  if (!self.trip.isInitialized) {
    return NO;
  }
  if (self.hasVehicle) {
    if (!self.vehicle.isInitialized) {
      return NO;
    }
  }
  __block BOOL isInitstopTimeUpdate = YES;
   [self.stopTimeUpdate enumerateObjectsUsingBlock:^(TripUpdateStopTimeUpdate *element, NSUInteger idx, BOOL *stop) {
    if (!element.isInitialized) {
      isInitstopTimeUpdate = NO;
      *stop = YES;
    }
  }];
  if (!isInitstopTimeUpdate) return isInitstopTimeUpdate;
  if (!self.extensionsAreInitialized) {
    return NO;
  }
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasTrip) {
    [output writeMessage:1 value:self.trip];
  }
  [self.stopTimeUpdateArray enumerateObjectsUsingBlock:^(TripUpdateStopTimeUpdate *element, NSUInteger idx, BOOL *stop) {
    [output writeMessage:2 value:element];
  }];
  if (self.hasVehicle) {
    [output writeMessage:3 value:self.vehicle];
  }
  if (self.hasTimestamp) {
    [output writeUInt64:4 value:self.timestamp];
  }
  [self writeExtensionsToCodedOutputStream:output
                                      from:1000
                                        to:2000];
  [self.unknownFields writeToCodedOutputStream:output];
}
- (SInt32) serializedSize {
  __block SInt32 size_ = memoizedSerializedSize;
  if (size_ != -1) {
    return size_;
  }

  size_ = 0;
  if (self.hasTrip) {
    size_ += computeMessageSize(1, self.trip);
  }
  [self.stopTimeUpdateArray enumerateObjectsUsingBlock:^(TripUpdateStopTimeUpdate *element, NSUInteger idx, BOOL *stop) {
    size_ += computeMessageSize(2, element);
  }];
  if (self.hasVehicle) {
    size_ += computeMessageSize(3, self.vehicle);
  }
  if (self.hasTimestamp) {
    size_ += computeUInt64Size(4, self.timestamp);
  }
  size_ += [self extensionsSerializedSize];
  size_ += self.unknownFields.serializedSize;
  memoizedSerializedSize = size_;
  return size_;
}
+ (TripUpdate*) parseFromData:(NSData*) data {
  return (TripUpdate*)[[[TripUpdate builder] mergeFromData:data] build];
}
+ (TripUpdate*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (TripUpdate*)[[[TripUpdate builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (TripUpdate*) parseFromInputStream:(NSInputStream*) input {
  return (TripUpdate*)[[[TripUpdate builder] mergeFromInputStream:input] build];
}
+ (TripUpdate*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (TripUpdate*)[[[TripUpdate builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (TripUpdate*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (TripUpdate*)[[[TripUpdate builder] mergeFromCodedInputStream:input] build];
}
+ (TripUpdate*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (TripUpdate*)[[[TripUpdate builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (TripUpdateBuilder*) builder {
  return [[TripUpdateBuilder alloc] init];
}
+ (TripUpdateBuilder*) builderWithPrototype:(TripUpdate*) prototype {
  return [[TripUpdate builder] mergeFrom:prototype];
}
- (TripUpdateBuilder*) builder {
  return [TripUpdate builder];
}
- (TripUpdateBuilder*) toBuilder {
  return [TripUpdate builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  if (self.hasTrip) {
    [output appendFormat:@"%@%@ {\n", indent, @"trip"];
    [self.trip writeDescriptionTo:output
                         withIndent:[NSString stringWithFormat:@"%@  ", indent]];
    [output appendFormat:@"%@}\n", indent];
  }
  [self.stopTimeUpdateArray enumerateObjectsUsingBlock:^(TripUpdateStopTimeUpdate *element, NSUInteger idx, BOOL *stop) {
    [output appendFormat:@"%@%@ {\n", indent, @"stopTimeUpdate"];
    [element writeDescriptionTo:output
                     withIndent:[NSString stringWithFormat:@"%@  ", indent]];
    [output appendFormat:@"%@}\n", indent];
  }];
  if (self.hasVehicle) {
    [output appendFormat:@"%@%@ {\n", indent, @"vehicle"];
    [self.vehicle writeDescriptionTo:output
                         withIndent:[NSString stringWithFormat:@"%@  ", indent]];
    [output appendFormat:@"%@}\n", indent];
  }
  if (self.hasTimestamp) {
    [output appendFormat:@"%@%@: %@\n", indent, @"timestamp", [NSNumber numberWithLongLong:self.timestamp]];
  }
  [self writeExtensionDescriptionToMutableString:(NSMutableString*)output
                                            from:1000
                                              to:2000
                                      withIndent:indent];
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[TripUpdate class]]) {
    return NO;
  }
  TripUpdate *otherMessage = other;
  return
      self.hasTrip == otherMessage.hasTrip &&
      (!self.hasTrip || [self.trip isEqual:otherMessage.trip]) &&
      [self.stopTimeUpdateArray isEqualToArray:otherMessage.stopTimeUpdateArray] &&
      self.hasVehicle == otherMessage.hasVehicle &&
      (!self.hasVehicle || [self.vehicle isEqual:otherMessage.vehicle]) &&
      self.hasTimestamp == otherMessage.hasTimestamp &&
      (!self.hasTimestamp || self.timestamp == otherMessage.timestamp) &&
      [self isEqualExtensionsInOther:otherMessage from:1000 to:2000] &&

      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  __block NSUInteger hashCode = 7;
  if (self.hasTrip) {
    hashCode = hashCode * 31 + [self.trip hash];
  }
  [self.stopTimeUpdateArray enumerateObjectsUsingBlock:^(TripUpdateStopTimeUpdate *element, NSUInteger idx, BOOL *stop) {
    hashCode = hashCode * 31 + [element hash];
  }];
  if (self.hasVehicle) {
    hashCode = hashCode * 31 + [self.vehicle hash];
  }
  if (self.hasTimestamp) {
    hashCode = hashCode * 31 + [[NSNumber numberWithLongLong:self.timestamp] hash];
  }
  hashCode = hashCode * 31 + [self hashExtensionsFrom:1000 to:2000];
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

@interface TripUpdateStopTimeEvent ()
@property SInt32 delay;
@property SInt64 time;
@property SInt32 uncertainty;
@end

@implementation TripUpdateStopTimeEvent

- (BOOL) hasDelay {
  return !!hasDelay_;
}
- (void) setHasDelay:(BOOL) value_ {
  hasDelay_ = !!value_;
}
@synthesize delay;
- (BOOL) hasTime {
  return !!hasTime_;
}
- (void) setHasTime:(BOOL) value_ {
  hasTime_ = !!value_;
}
@synthesize time;
- (BOOL) hasUncertainty {
  return !!hasUncertainty_;
}
- (void) setHasUncertainty:(BOOL) value_ {
  hasUncertainty_ = !!value_;
}
@synthesize uncertainty;
- (id) init {
  if ((self = [super init])) {
    self.delay = 0;
    self.time = 0L;
    self.uncertainty = 0;
  }
  return self;
}
static TripUpdateStopTimeEvent* defaultTripUpdateStopTimeEventInstance = nil;
+ (void) initialize {
  if (self == [TripUpdateStopTimeEvent class]) {
    defaultTripUpdateStopTimeEventInstance = [[TripUpdateStopTimeEvent alloc] init];
  }
}
+ (TripUpdateStopTimeEvent*) defaultInstance {
  return defaultTripUpdateStopTimeEventInstance;
}
- (TripUpdateStopTimeEvent*) defaultInstance {
  return defaultTripUpdateStopTimeEventInstance;
}
- (BOOL) isInitialized {
  if (!self.extensionsAreInitialized) {
    return NO;
  }
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasDelay) {
    [output writeInt32:1 value:self.delay];
  }
  if (self.hasTime) {
    [output writeInt64:2 value:self.time];
  }
  if (self.hasUncertainty) {
    [output writeInt32:3 value:self.uncertainty];
  }
  [self writeExtensionsToCodedOutputStream:output
                                      from:1000
                                        to:2000];
  [self.unknownFields writeToCodedOutputStream:output];
}
- (SInt32) serializedSize {
  __block SInt32 size_ = memoizedSerializedSize;
  if (size_ != -1) {
    return size_;
  }

  size_ = 0;
  if (self.hasDelay) {
    size_ += computeInt32Size(1, self.delay);
  }
  if (self.hasTime) {
    size_ += computeInt64Size(2, self.time);
  }
  if (self.hasUncertainty) {
    size_ += computeInt32Size(3, self.uncertainty);
  }
  size_ += [self extensionsSerializedSize];
  size_ += self.unknownFields.serializedSize;
  memoizedSerializedSize = size_;
  return size_;
}
+ (TripUpdateStopTimeEvent*) parseFromData:(NSData*) data {
  return (TripUpdateStopTimeEvent*)[[[TripUpdateStopTimeEvent builder] mergeFromData:data] build];
}
+ (TripUpdateStopTimeEvent*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (TripUpdateStopTimeEvent*)[[[TripUpdateStopTimeEvent builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (TripUpdateStopTimeEvent*) parseFromInputStream:(NSInputStream*) input {
  return (TripUpdateStopTimeEvent*)[[[TripUpdateStopTimeEvent builder] mergeFromInputStream:input] build];
}
+ (TripUpdateStopTimeEvent*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (TripUpdateStopTimeEvent*)[[[TripUpdateStopTimeEvent builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (TripUpdateStopTimeEvent*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (TripUpdateStopTimeEvent*)[[[TripUpdateStopTimeEvent builder] mergeFromCodedInputStream:input] build];
}
+ (TripUpdateStopTimeEvent*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (TripUpdateStopTimeEvent*)[[[TripUpdateStopTimeEvent builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (TripUpdateStopTimeEventBuilder*) builder {
  return [[TripUpdateStopTimeEventBuilder alloc] init];
}
+ (TripUpdateStopTimeEventBuilder*) builderWithPrototype:(TripUpdateStopTimeEvent*) prototype {
  return [[TripUpdateStopTimeEvent builder] mergeFrom:prototype];
}
- (TripUpdateStopTimeEventBuilder*) builder {
  return [TripUpdateStopTimeEvent builder];
}
- (TripUpdateStopTimeEventBuilder*) toBuilder {
  return [TripUpdateStopTimeEvent builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  if (self.hasDelay) {
    [output appendFormat:@"%@%@: %@\n", indent, @"delay", [NSNumber numberWithInteger:self.delay]];
  }
  if (self.hasTime) {
    [output appendFormat:@"%@%@: %@\n", indent, @"time", [NSNumber numberWithLongLong:self.time]];
  }
  if (self.hasUncertainty) {
    [output appendFormat:@"%@%@: %@\n", indent, @"uncertainty", [NSNumber numberWithInteger:self.uncertainty]];
  }
  [self writeExtensionDescriptionToMutableString:(NSMutableString*)output
                                            from:1000
                                              to:2000
                                      withIndent:indent];
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[TripUpdateStopTimeEvent class]]) {
    return NO;
  }
  TripUpdateStopTimeEvent *otherMessage = other;
  return
      self.hasDelay == otherMessage.hasDelay &&
      (!self.hasDelay || self.delay == otherMessage.delay) &&
      self.hasTime == otherMessage.hasTime &&
      (!self.hasTime || self.time == otherMessage.time) &&
      self.hasUncertainty == otherMessage.hasUncertainty &&
      (!self.hasUncertainty || self.uncertainty == otherMessage.uncertainty) &&
      [self isEqualExtensionsInOther:otherMessage from:1000 to:2000] &&

      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  __block NSUInteger hashCode = 7;
  if (self.hasDelay) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInteger:self.delay] hash];
  }
  if (self.hasTime) {
    hashCode = hashCode * 31 + [[NSNumber numberWithLongLong:self.time] hash];
  }
  if (self.hasUncertainty) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInteger:self.uncertainty] hash];
  }
  hashCode = hashCode * 31 + [self hashExtensionsFrom:1000 to:2000];
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

@interface TripUpdateStopTimeEventBuilder()
@property (strong) TripUpdateStopTimeEvent* result;
@end

@implementation TripUpdateStopTimeEventBuilder
@synthesize result;
- (id) init {
  if ((self = [super init])) {
    self.result = [[TripUpdateStopTimeEvent alloc] init];
  }
  return self;
}
- (PBExtendableMessage*) internalGetResult {
  return result;
}
- (TripUpdateStopTimeEventBuilder*) clear {
  self.result = [[TripUpdateStopTimeEvent alloc] init];
  return self;
}
- (TripUpdateStopTimeEventBuilder*) clone {
  return [TripUpdateStopTimeEvent builderWithPrototype:result];
}
- (TripUpdateStopTimeEvent*) defaultInstance {
  return [TripUpdateStopTimeEvent defaultInstance];
}
- (TripUpdateStopTimeEvent*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (TripUpdateStopTimeEvent*) buildPartial {
  TripUpdateStopTimeEvent* returnMe = result;
  self.result = nil;
  return returnMe;
}
- (TripUpdateStopTimeEventBuilder*) mergeFrom:(TripUpdateStopTimeEvent*) other {
  if (other == [TripUpdateStopTimeEvent defaultInstance]) {
    return self;
  }
  if (other.hasDelay) {
    [self setDelay:other.delay];
  }
  if (other.hasTime) {
    [self setTime:other.time];
  }
  if (other.hasUncertainty) {
    [self setUncertainty:other.uncertainty];
  }
  [self mergeExtensionFields:other];
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (TripUpdateStopTimeEventBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (TripUpdateStopTimeEventBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSetBuilder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    SInt32 tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 8: {
        [self setDelay:[input readInt32]];
        break;
      }
      case 16: {
        [self setTime:[input readInt64]];
        break;
      }
      case 24: {
        [self setUncertainty:[input readInt32]];
        break;
      }
    }
  }
}
- (BOOL) hasDelay {
  return result.hasDelay;
}
- (SInt32) delay {
  return result.delay;
}
- (TripUpdateStopTimeEventBuilder*) setDelay:(SInt32) value {
  result.hasDelay = YES;
  result.delay = value;
  return self;
}
- (TripUpdateStopTimeEventBuilder*) clearDelay {
  result.hasDelay = NO;
  result.delay = 0;
  return self;
}
- (BOOL) hasTime {
  return result.hasTime;
}
- (SInt64) time {
  return result.time;
}
- (TripUpdateStopTimeEventBuilder*) setTime:(SInt64) value {
  result.hasTime = YES;
  result.time = value;
  return self;
}
- (TripUpdateStopTimeEventBuilder*) clearTime {
  result.hasTime = NO;
  result.time = 0L;
  return self;
}
- (BOOL) hasUncertainty {
  return result.hasUncertainty;
}
- (SInt32) uncertainty {
  return result.uncertainty;
}
- (TripUpdateStopTimeEventBuilder*) setUncertainty:(SInt32) value {
  result.hasUncertainty = YES;
  result.uncertainty = value;
  return self;
}
- (TripUpdateStopTimeEventBuilder*) clearUncertainty {
  result.hasUncertainty = NO;
  result.uncertainty = 0;
  return self;
}
@end

@interface TripUpdateStopTimeUpdate ()
@property UInt32 stopSequence;
@property (strong) NSString* stopId;
@property (strong) TripUpdateStopTimeEvent* arrival;
@property (strong) TripUpdateStopTimeEvent* departure;
@property TripUpdateStopTimeUpdateScheduleRelationship scheduleRelationship;
@end

@implementation TripUpdateStopTimeUpdate

- (BOOL) hasStopSequence {
  return !!hasStopSequence_;
}
- (void) setHasStopSequence:(BOOL) value_ {
  hasStopSequence_ = !!value_;
}
@synthesize stopSequence;
- (BOOL) hasStopId {
  return !!hasStopId_;
}
- (void) setHasStopId:(BOOL) value_ {
  hasStopId_ = !!value_;
}
@synthesize stopId;
- (BOOL) hasArrival {
  return !!hasArrival_;
}
- (void) setHasArrival:(BOOL) value_ {
  hasArrival_ = !!value_;
}
@synthesize arrival;
- (BOOL) hasDeparture {
  return !!hasDeparture_;
}
- (void) setHasDeparture:(BOOL) value_ {
  hasDeparture_ = !!value_;
}
@synthesize departure;
- (BOOL) hasScheduleRelationship {
  return !!hasScheduleRelationship_;
}
- (void) setHasScheduleRelationship:(BOOL) value_ {
  hasScheduleRelationship_ = !!value_;
}
@synthesize scheduleRelationship;
- (id) init {
  if ((self = [super init])) {
    self.stopSequence = 0;
    self.stopId = @"";
    self.arrival = [TripUpdateStopTimeEvent defaultInstance];
    self.departure = [TripUpdateStopTimeEvent defaultInstance];
    self.scheduleRelationship = TripUpdateStopTimeUpdateScheduleRelationshipScheduled;
  }
  return self;
}
static TripUpdateStopTimeUpdate* defaultTripUpdateStopTimeUpdateInstance = nil;
+ (void) initialize {
  if (self == [TripUpdateStopTimeUpdate class]) {
    defaultTripUpdateStopTimeUpdateInstance = [[TripUpdateStopTimeUpdate alloc] init];
  }
}
+ (TripUpdateStopTimeUpdate*) defaultInstance {
  return defaultTripUpdateStopTimeUpdateInstance;
}
- (TripUpdateStopTimeUpdate*) defaultInstance {
  return defaultTripUpdateStopTimeUpdateInstance;
}
- (BOOL) isInitialized {
  if (self.hasArrival) {
    if (!self.arrival.isInitialized) {
      return NO;
    }
  }
  if (self.hasDeparture) {
    if (!self.departure.isInitialized) {
      return NO;
    }
  }
  if (!self.extensionsAreInitialized) {
    return NO;
  }
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasStopSequence) {
    [output writeUInt32:1 value:self.stopSequence];
  }
  if (self.hasArrival) {
    [output writeMessage:2 value:self.arrival];
  }
  if (self.hasDeparture) {
    [output writeMessage:3 value:self.departure];
  }
  if (self.hasStopId) {
    [output writeString:4 value:self.stopId];
  }
  if (self.hasScheduleRelationship) {
    [output writeEnum:5 value:self.scheduleRelationship];
  }
  [self writeExtensionsToCodedOutputStream:output
                                      from:1000
                                        to:2000];
  [self.unknownFields writeToCodedOutputStream:output];
}
- (SInt32) serializedSize {
  __block SInt32 size_ = memoizedSerializedSize;
  if (size_ != -1) {
    return size_;
  }

  size_ = 0;
  if (self.hasStopSequence) {
    size_ += computeUInt32Size(1, self.stopSequence);
  }
  if (self.hasArrival) {
    size_ += computeMessageSize(2, self.arrival);
  }
  if (self.hasDeparture) {
    size_ += computeMessageSize(3, self.departure);
  }
  if (self.hasStopId) {
    size_ += computeStringSize(4, self.stopId);
  }
  if (self.hasScheduleRelationship) {
    size_ += computeEnumSize(5, self.scheduleRelationship);
  }
  size_ += [self extensionsSerializedSize];
  size_ += self.unknownFields.serializedSize;
  memoizedSerializedSize = size_;
  return size_;
}
+ (TripUpdateStopTimeUpdate*) parseFromData:(NSData*) data {
  return (TripUpdateStopTimeUpdate*)[[[TripUpdateStopTimeUpdate builder] mergeFromData:data] build];
}
+ (TripUpdateStopTimeUpdate*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (TripUpdateStopTimeUpdate*)[[[TripUpdateStopTimeUpdate builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (TripUpdateStopTimeUpdate*) parseFromInputStream:(NSInputStream*) input {
  return (TripUpdateStopTimeUpdate*)[[[TripUpdateStopTimeUpdate builder] mergeFromInputStream:input] build];
}
+ (TripUpdateStopTimeUpdate*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (TripUpdateStopTimeUpdate*)[[[TripUpdateStopTimeUpdate builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (TripUpdateStopTimeUpdate*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (TripUpdateStopTimeUpdate*)[[[TripUpdateStopTimeUpdate builder] mergeFromCodedInputStream:input] build];
}
+ (TripUpdateStopTimeUpdate*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (TripUpdateStopTimeUpdate*)[[[TripUpdateStopTimeUpdate builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (TripUpdateStopTimeUpdateBuilder*) builder {
  return [[TripUpdateStopTimeUpdateBuilder alloc] init];
}
+ (TripUpdateStopTimeUpdateBuilder*) builderWithPrototype:(TripUpdateStopTimeUpdate*) prototype {
  return [[TripUpdateStopTimeUpdate builder] mergeFrom:prototype];
}
- (TripUpdateStopTimeUpdateBuilder*) builder {
  return [TripUpdateStopTimeUpdate builder];
}
- (TripUpdateStopTimeUpdateBuilder*) toBuilder {
  return [TripUpdateStopTimeUpdate builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  if (self.hasStopSequence) {
    [output appendFormat:@"%@%@: %@\n", indent, @"stopSequence", [NSNumber numberWithInteger:self.stopSequence]];
  }
  if (self.hasArrival) {
    [output appendFormat:@"%@%@ {\n", indent, @"arrival"];
    [self.arrival writeDescriptionTo:output
                         withIndent:[NSString stringWithFormat:@"%@  ", indent]];
    [output appendFormat:@"%@}\n", indent];
  }
  if (self.hasDeparture) {
    [output appendFormat:@"%@%@ {\n", indent, @"departure"];
    [self.departure writeDescriptionTo:output
                         withIndent:[NSString stringWithFormat:@"%@  ", indent]];
    [output appendFormat:@"%@}\n", indent];
  }
  if (self.hasStopId) {
    [output appendFormat:@"%@%@: %@\n", indent, @"stopId", self.stopId];
  }
  if (self.hasScheduleRelationship) {
    [output appendFormat:@"%@%@: %d\n", indent, @"scheduleRelationship", self.scheduleRelationship];
  }
  [self writeExtensionDescriptionToMutableString:(NSMutableString*)output
                                            from:1000
                                              to:2000
                                      withIndent:indent];
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[TripUpdateStopTimeUpdate class]]) {
    return NO;
  }
  TripUpdateStopTimeUpdate *otherMessage = other;
  return
      self.hasStopSequence == otherMessage.hasStopSequence &&
      (!self.hasStopSequence || self.stopSequence == otherMessage.stopSequence) &&
      self.hasArrival == otherMessage.hasArrival &&
      (!self.hasArrival || [self.arrival isEqual:otherMessage.arrival]) &&
      self.hasDeparture == otherMessage.hasDeparture &&
      (!self.hasDeparture || [self.departure isEqual:otherMessage.departure]) &&
      self.hasStopId == otherMessage.hasStopId &&
      (!self.hasStopId || [self.stopId isEqual:otherMessage.stopId]) &&
      self.hasScheduleRelationship == otherMessage.hasScheduleRelationship &&
      (!self.hasScheduleRelationship || self.scheduleRelationship == otherMessage.scheduleRelationship) &&
      [self isEqualExtensionsInOther:otherMessage from:1000 to:2000] &&

      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  __block NSUInteger hashCode = 7;
  if (self.hasStopSequence) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInteger:self.stopSequence] hash];
  }
  if (self.hasArrival) {
    hashCode = hashCode * 31 + [self.arrival hash];
  }
  if (self.hasDeparture) {
    hashCode = hashCode * 31 + [self.departure hash];
  }
  if (self.hasStopId) {
    hashCode = hashCode * 31 + [self.stopId hash];
  }
  if (self.hasScheduleRelationship) {
    hashCode = hashCode * 31 + self.scheduleRelationship;
  }
  hashCode = hashCode * 31 + [self hashExtensionsFrom:1000 to:2000];
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

BOOL TripUpdateStopTimeUpdateScheduleRelationshipIsValidValue(TripUpdateStopTimeUpdateScheduleRelationship value) {
  switch (value) {
    case TripUpdateStopTimeUpdateScheduleRelationshipScheduled:
    case TripUpdateStopTimeUpdateScheduleRelationshipSkipped:
    case TripUpdateStopTimeUpdateScheduleRelationshipNoData:
      return YES;
    default:
      return NO;
  }
}
@interface TripUpdateStopTimeUpdateBuilder()
@property (strong) TripUpdateStopTimeUpdate* result;
@end

@implementation TripUpdateStopTimeUpdateBuilder
@synthesize result;
- (id) init {
  if ((self = [super init])) {
    self.result = [[TripUpdateStopTimeUpdate alloc] init];
  }
  return self;
}
- (PBExtendableMessage*) internalGetResult {
  return result;
}
- (TripUpdateStopTimeUpdateBuilder*) clear {
  self.result = [[TripUpdateStopTimeUpdate alloc] init];
  return self;
}
- (TripUpdateStopTimeUpdateBuilder*) clone {
  return [TripUpdateStopTimeUpdate builderWithPrototype:result];
}
- (TripUpdateStopTimeUpdate*) defaultInstance {
  return [TripUpdateStopTimeUpdate defaultInstance];
}
- (TripUpdateStopTimeUpdate*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (TripUpdateStopTimeUpdate*) buildPartial {
  TripUpdateStopTimeUpdate* returnMe = result;
  self.result = nil;
  return returnMe;
}
- (TripUpdateStopTimeUpdateBuilder*) mergeFrom:(TripUpdateStopTimeUpdate*) other {
  if (other == [TripUpdateStopTimeUpdate defaultInstance]) {
    return self;
  }
  if (other.hasStopSequence) {
    [self setStopSequence:other.stopSequence];
  }
  if (other.hasStopId) {
    [self setStopId:other.stopId];
  }
  if (other.hasArrival) {
    [self mergeArrival:other.arrival];
  }
  if (other.hasDeparture) {
    [self mergeDeparture:other.departure];
  }
  if (other.hasScheduleRelationship) {
    [self setScheduleRelationship:other.scheduleRelationship];
  }
  [self mergeExtensionFields:other];
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (TripUpdateStopTimeUpdateBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (TripUpdateStopTimeUpdateBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSetBuilder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    SInt32 tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 8: {
        [self setStopSequence:[input readUInt32]];
        break;
      }
      case 18: {
        TripUpdateStopTimeEventBuilder* subBuilder = [TripUpdateStopTimeEvent builder];
        if (self.hasArrival) {
          [subBuilder mergeFrom:self.arrival];
        }
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self setArrival:[subBuilder buildPartial]];
        break;
      }
      case 26: {
        TripUpdateStopTimeEventBuilder* subBuilder = [TripUpdateStopTimeEvent builder];
        if (self.hasDeparture) {
          [subBuilder mergeFrom:self.departure];
        }
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self setDeparture:[subBuilder buildPartial]];
        break;
      }
      case 34: {
        [self setStopId:[input readString]];
        break;
      }
      case 40: {
        TripUpdateStopTimeUpdateScheduleRelationship value = (TripUpdateStopTimeUpdateScheduleRelationship)[input readEnum];
        if (TripUpdateStopTimeUpdateScheduleRelationshipIsValidValue(value)) {
          [self setScheduleRelationship:value];
        } else {
          [unknownFields mergeVarintField:5 value:value];
        }
        break;
      }
    }
  }
}
- (BOOL) hasStopSequence {
  return result.hasStopSequence;
}
- (UInt32) stopSequence {
  return result.stopSequence;
}
- (TripUpdateStopTimeUpdateBuilder*) setStopSequence:(UInt32) value {
  result.hasStopSequence = YES;
  result.stopSequence = value;
  return self;
}
- (TripUpdateStopTimeUpdateBuilder*) clearStopSequence {
  result.hasStopSequence = NO;
  result.stopSequence = 0;
  return self;
}
- (BOOL) hasStopId {
  return result.hasStopId;
}
- (NSString*) stopId {
  return result.stopId;
}
- (TripUpdateStopTimeUpdateBuilder*) setStopId:(NSString*) value {
  result.hasStopId = YES;
  result.stopId = value;
  return self;
}
- (TripUpdateStopTimeUpdateBuilder*) clearStopId {
  result.hasStopId = NO;
  result.stopId = @"";
  return self;
}
- (BOOL) hasArrival {
  return result.hasArrival;
}
- (TripUpdateStopTimeEvent*) arrival {
  return result.arrival;
}
- (TripUpdateStopTimeUpdateBuilder*) setArrival:(TripUpdateStopTimeEvent*) value {
  result.hasArrival = YES;
  result.arrival = value;
  return self;
}
- (TripUpdateStopTimeUpdateBuilder*) setArrivalBuilder:(TripUpdateStopTimeEventBuilder*) builderForValue {
  return [self setArrival:[builderForValue build]];
}
- (TripUpdateStopTimeUpdateBuilder*) mergeArrival:(TripUpdateStopTimeEvent*) value {
  if (result.hasArrival &&
      result.arrival != [TripUpdateStopTimeEvent defaultInstance]) {
    result.arrival =
      [[[TripUpdateStopTimeEvent builderWithPrototype:result.arrival] mergeFrom:value] buildPartial];
  } else {
    result.arrival = value;
  }
  result.hasArrival = YES;
  return self;
}
- (TripUpdateStopTimeUpdateBuilder*) clearArrival {
  result.hasArrival = NO;
  result.arrival = [TripUpdateStopTimeEvent defaultInstance];
  return self;
}
- (BOOL) hasDeparture {
  return result.hasDeparture;
}
- (TripUpdateStopTimeEvent*) departure {
  return result.departure;
}
- (TripUpdateStopTimeUpdateBuilder*) setDeparture:(TripUpdateStopTimeEvent*) value {
  result.hasDeparture = YES;
  result.departure = value;
  return self;
}
- (TripUpdateStopTimeUpdateBuilder*) setDepartureBuilder:(TripUpdateStopTimeEventBuilder*) builderForValue {
  return [self setDeparture:[builderForValue build]];
}
- (TripUpdateStopTimeUpdateBuilder*) mergeDeparture:(TripUpdateStopTimeEvent*) value {
  if (result.hasDeparture &&
      result.departure != [TripUpdateStopTimeEvent defaultInstance]) {
    result.departure =
      [[[TripUpdateStopTimeEvent builderWithPrototype:result.departure] mergeFrom:value] buildPartial];
  } else {
    result.departure = value;
  }
  result.hasDeparture = YES;
  return self;
}
- (TripUpdateStopTimeUpdateBuilder*) clearDeparture {
  result.hasDeparture = NO;
  result.departure = [TripUpdateStopTimeEvent defaultInstance];
  return self;
}
- (BOOL) hasScheduleRelationship {
  return result.hasScheduleRelationship;
}
- (TripUpdateStopTimeUpdateScheduleRelationship) scheduleRelationship {
  return result.scheduleRelationship;
}
- (TripUpdateStopTimeUpdateBuilder*) setScheduleRelationship:(TripUpdateStopTimeUpdateScheduleRelationship) value {
  result.hasScheduleRelationship = YES;
  result.scheduleRelationship = value;
  return self;
}
- (TripUpdateStopTimeUpdateBuilder*) clearScheduleRelationship {
  result.hasScheduleRelationship = NO;
  result.scheduleRelationship = TripUpdateStopTimeUpdateScheduleRelationshipScheduled;
  return self;
}
@end

@interface TripUpdateBuilder()
@property (strong) TripUpdate* result;
@end

@implementation TripUpdateBuilder
@synthesize result;
- (id) init {
  if ((self = [super init])) {
    self.result = [[TripUpdate alloc] init];
  }
  return self;
}
- (PBExtendableMessage*) internalGetResult {
  return result;
}
- (TripUpdateBuilder*) clear {
  self.result = [[TripUpdate alloc] init];
  return self;
}
- (TripUpdateBuilder*) clone {
  return [TripUpdate builderWithPrototype:result];
}
- (TripUpdate*) defaultInstance {
  return [TripUpdate defaultInstance];
}
- (TripUpdate*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (TripUpdate*) buildPartial {
  TripUpdate* returnMe = result;
  self.result = nil;
  return returnMe;
}
- (TripUpdateBuilder*) mergeFrom:(TripUpdate*) other {
  if (other == [TripUpdate defaultInstance]) {
    return self;
  }
  if (other.hasTrip) {
    [self mergeTrip:other.trip];
  }
  if (other.hasVehicle) {
    [self mergeVehicle:other.vehicle];
  }
  if (other.stopTimeUpdateArray.count > 0) {
    if (result.stopTimeUpdateArray == nil) {
      result.stopTimeUpdateArray = [[NSMutableArray alloc] initWithArray:other.stopTimeUpdateArray];
    } else {
      [result.stopTimeUpdateArray addObjectsFromArray:other.stopTimeUpdateArray];
    }
  }
  if (other.hasTimestamp) {
    [self setTimestamp:other.timestamp];
  }
  [self mergeExtensionFields:other];
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (TripUpdateBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (TripUpdateBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSetBuilder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    SInt32 tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 10: {
        TripDescriptorBuilder* subBuilder = [TripDescriptor builder];
        if (self.hasTrip) {
          [subBuilder mergeFrom:self.trip];
        }
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self setTrip:[subBuilder buildPartial]];
        break;
      }
      case 18: {
        TripUpdateStopTimeUpdateBuilder* subBuilder = [TripUpdateStopTimeUpdate builder];
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self addStopTimeUpdate:[subBuilder buildPartial]];
        break;
      }
      case 26: {
        VehicleDescriptorBuilder* subBuilder = [VehicleDescriptor builder];
        if (self.hasVehicle) {
          [subBuilder mergeFrom:self.vehicle];
        }
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self setVehicle:[subBuilder buildPartial]];
        break;
      }
      case 32: {
        [self setTimestamp:[input readUInt64]];
        break;
      }
    }
  }
}
- (BOOL) hasTrip {
  return result.hasTrip;
}
- (TripDescriptor*) trip {
  return result.trip;
}
- (TripUpdateBuilder*) setTrip:(TripDescriptor*) value {
  result.hasTrip = YES;
  result.trip = value;
  return self;
}
- (TripUpdateBuilder*) setTripBuilder:(TripDescriptorBuilder*) builderForValue {
  return [self setTrip:[builderForValue build]];
}
- (TripUpdateBuilder*) mergeTrip:(TripDescriptor*) value {
  if (result.hasTrip &&
      result.trip != [TripDescriptor defaultInstance]) {
    result.trip =
      [[[TripDescriptor builderWithPrototype:result.trip] mergeFrom:value] buildPartial];
  } else {
    result.trip = value;
  }
  result.hasTrip = YES;
  return self;
}
- (TripUpdateBuilder*) clearTrip {
  result.hasTrip = NO;
  result.trip = [TripDescriptor defaultInstance];
  return self;
}
- (BOOL) hasVehicle {
  return result.hasVehicle;
}
- (VehicleDescriptor*) vehicle {
  return result.vehicle;
}
- (TripUpdateBuilder*) setVehicle:(VehicleDescriptor*) value {
  result.hasVehicle = YES;
  result.vehicle = value;
  return self;
}
- (TripUpdateBuilder*) setVehicleBuilder:(VehicleDescriptorBuilder*) builderForValue {
  return [self setVehicle:[builderForValue build]];
}
- (TripUpdateBuilder*) mergeVehicle:(VehicleDescriptor*) value {
  if (result.hasVehicle &&
      result.vehicle != [VehicleDescriptor defaultInstance]) {
    result.vehicle =
      [[[VehicleDescriptor builderWithPrototype:result.vehicle] mergeFrom:value] buildPartial];
  } else {
    result.vehicle = value;
  }
  result.hasVehicle = YES;
  return self;
}
- (TripUpdateBuilder*) clearVehicle {
  result.hasVehicle = NO;
  result.vehicle = [VehicleDescriptor defaultInstance];
  return self;
}
- (NSMutableArray *)stopTimeUpdate {
  return result.stopTimeUpdateArray;
}
- (TripUpdateStopTimeUpdate*)stopTimeUpdateAtIndex:(NSUInteger)index {
  return [result stopTimeUpdateAtIndex:index];
}
- (TripUpdateBuilder *)addStopTimeUpdate:(TripUpdateStopTimeUpdate*)value {
  if (result.stopTimeUpdateArray == nil) {
    result.stopTimeUpdateArray = [[NSMutableArray alloc]init];
  }
  [result.stopTimeUpdateArray addObject:value];
  return self;
}
- (TripUpdateBuilder *)setStopTimeUpdateArray:(NSArray *)array {
  result.stopTimeUpdateArray = [[NSMutableArray alloc]initWithArray:array];
  return self;
}
- (TripUpdateBuilder *)clearStopTimeUpdate {
  result.stopTimeUpdateArray = nil;
  return self;
}
- (BOOL) hasTimestamp {
  return result.hasTimestamp;
}
- (UInt64) timestamp {
  return result.timestamp;
}
- (TripUpdateBuilder*) setTimestamp:(UInt64) value {
  result.hasTimestamp = YES;
  result.timestamp = value;
  return self;
}
- (TripUpdateBuilder*) clearTimestamp {
  result.hasTimestamp = NO;
  result.timestamp = 0L;
  return self;
}
@end

@interface VehiclePosition ()
@property (strong) TripDescriptor* trip;
@property (strong) VehicleDescriptor* vehicle;
@property (strong) Position* position;
@property UInt32 currentStopSequence;
@property (strong) NSString* stopId;
@property VehiclePositionVehicleStopStatus currentStatus;
@property UInt64 timestamp;
@property VehiclePositionCongestionLevel congestionLevel;
@end

@implementation VehiclePosition

- (BOOL) hasTrip {
  return !!hasTrip_;
}
- (void) setHasTrip:(BOOL) value_ {
  hasTrip_ = !!value_;
}
@synthesize trip;
- (BOOL) hasVehicle {
  return !!hasVehicle_;
}
- (void) setHasVehicle:(BOOL) value_ {
  hasVehicle_ = !!value_;
}
@synthesize vehicle;
- (BOOL) hasPosition {
  return !!hasPosition_;
}
- (void) setHasPosition:(BOOL) value_ {
  hasPosition_ = !!value_;
}
@synthesize position;
- (BOOL) hasCurrentStopSequence {
  return !!hasCurrentStopSequence_;
}
- (void) setHasCurrentStopSequence:(BOOL) value_ {
  hasCurrentStopSequence_ = !!value_;
}
@synthesize currentStopSequence;
- (BOOL) hasStopId {
  return !!hasStopId_;
}
- (void) setHasStopId:(BOOL) value_ {
  hasStopId_ = !!value_;
}
@synthesize stopId;
- (BOOL) hasCurrentStatus {
  return !!hasCurrentStatus_;
}
- (void) setHasCurrentStatus:(BOOL) value_ {
  hasCurrentStatus_ = !!value_;
}
@synthesize currentStatus;
- (BOOL) hasTimestamp {
  return !!hasTimestamp_;
}
- (void) setHasTimestamp:(BOOL) value_ {
  hasTimestamp_ = !!value_;
}
@synthesize timestamp;
- (BOOL) hasCongestionLevel {
  return !!hasCongestionLevel_;
}
- (void) setHasCongestionLevel:(BOOL) value_ {
  hasCongestionLevel_ = !!value_;
}
@synthesize congestionLevel;
- (id) init {
  if ((self = [super init])) {
    self.trip = [TripDescriptor defaultInstance];
    self.vehicle = [VehicleDescriptor defaultInstance];
    self.position = [Position defaultInstance];
    self.currentStopSequence = 0;
    self.stopId = @"";
    self.currentStatus = VehiclePositionVehicleStopStatusInTransitTo;
    self.timestamp = 0L;
    self.congestionLevel = VehiclePositionCongestionLevelUnknownCongestionLevel;
  }
  return self;
}
static VehiclePosition* defaultVehiclePositionInstance = nil;
+ (void) initialize {
  if (self == [VehiclePosition class]) {
    defaultVehiclePositionInstance = [[VehiclePosition alloc] init];
  }
}
+ (VehiclePosition*) defaultInstance {
  return defaultVehiclePositionInstance;
}
- (VehiclePosition*) defaultInstance {
  return defaultVehiclePositionInstance;
}
- (BOOL) isInitialized {
  if (self.hasTrip) {
    if (!self.trip.isInitialized) {
      return NO;
    }
  }
  if (self.hasVehicle) {
    if (!self.vehicle.isInitialized) {
      return NO;
    }
  }
  if (self.hasPosition) {
    if (!self.position.isInitialized) {
      return NO;
    }
  }
  if (!self.extensionsAreInitialized) {
    return NO;
  }
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasTrip) {
    [output writeMessage:1 value:self.trip];
  }
  if (self.hasPosition) {
    [output writeMessage:2 value:self.position];
  }
  if (self.hasCurrentStopSequence) {
    [output writeUInt32:3 value:self.currentStopSequence];
  }
  if (self.hasCurrentStatus) {
    [output writeEnum:4 value:self.currentStatus];
  }
  if (self.hasTimestamp) {
    [output writeUInt64:5 value:self.timestamp];
  }
  if (self.hasCongestionLevel) {
    [output writeEnum:6 value:self.congestionLevel];
  }
  if (self.hasStopId) {
    [output writeString:7 value:self.stopId];
  }
  if (self.hasVehicle) {
    [output writeMessage:8 value:self.vehicle];
  }
  [self writeExtensionsToCodedOutputStream:output
                                      from:1000
                                        to:2000];
  [self.unknownFields writeToCodedOutputStream:output];
}
- (SInt32) serializedSize {
  __block SInt32 size_ = memoizedSerializedSize;
  if (size_ != -1) {
    return size_;
  }

  size_ = 0;
  if (self.hasTrip) {
    size_ += computeMessageSize(1, self.trip);
  }
  if (self.hasPosition) {
    size_ += computeMessageSize(2, self.position);
  }
  if (self.hasCurrentStopSequence) {
    size_ += computeUInt32Size(3, self.currentStopSequence);
  }
  if (self.hasCurrentStatus) {
    size_ += computeEnumSize(4, self.currentStatus);
  }
  if (self.hasTimestamp) {
    size_ += computeUInt64Size(5, self.timestamp);
  }
  if (self.hasCongestionLevel) {
    size_ += computeEnumSize(6, self.congestionLevel);
  }
  if (self.hasStopId) {
    size_ += computeStringSize(7, self.stopId);
  }
  if (self.hasVehicle) {
    size_ += computeMessageSize(8, self.vehicle);
  }
  size_ += [self extensionsSerializedSize];
  size_ += self.unknownFields.serializedSize;
  memoizedSerializedSize = size_;
  return size_;
}
+ (VehiclePosition*) parseFromData:(NSData*) data {
  return (VehiclePosition*)[[[VehiclePosition builder] mergeFromData:data] build];
}
+ (VehiclePosition*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (VehiclePosition*)[[[VehiclePosition builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (VehiclePosition*) parseFromInputStream:(NSInputStream*) input {
  return (VehiclePosition*)[[[VehiclePosition builder] mergeFromInputStream:input] build];
}
+ (VehiclePosition*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (VehiclePosition*)[[[VehiclePosition builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (VehiclePosition*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (VehiclePosition*)[[[VehiclePosition builder] mergeFromCodedInputStream:input] build];
}
+ (VehiclePosition*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (VehiclePosition*)[[[VehiclePosition builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (VehiclePositionBuilder*) builder {
  return [[VehiclePositionBuilder alloc] init];
}
+ (VehiclePositionBuilder*) builderWithPrototype:(VehiclePosition*) prototype {
  return [[VehiclePosition builder] mergeFrom:prototype];
}
- (VehiclePositionBuilder*) builder {
  return [VehiclePosition builder];
}
- (VehiclePositionBuilder*) toBuilder {
  return [VehiclePosition builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  if (self.hasTrip) {
    [output appendFormat:@"%@%@ {\n", indent, @"trip"];
    [self.trip writeDescriptionTo:output
                         withIndent:[NSString stringWithFormat:@"%@  ", indent]];
    [output appendFormat:@"%@}\n", indent];
  }
  if (self.hasPosition) {
    [output appendFormat:@"%@%@ {\n", indent, @"position"];
    [self.position writeDescriptionTo:output
                         withIndent:[NSString stringWithFormat:@"%@  ", indent]];
    [output appendFormat:@"%@}\n", indent];
  }
  if (self.hasCurrentStopSequence) {
    [output appendFormat:@"%@%@: %@\n", indent, @"currentStopSequence", [NSNumber numberWithInteger:self.currentStopSequence]];
  }
  if (self.hasCurrentStatus) {
    [output appendFormat:@"%@%@: %d\n", indent, @"currentStatus", self.currentStatus];
  }
  if (self.hasTimestamp) {
    [output appendFormat:@"%@%@: %@\n", indent, @"timestamp", [NSNumber numberWithLongLong:self.timestamp]];
  }
  if (self.hasCongestionLevel) {
    [output appendFormat:@"%@%@: %d\n", indent, @"congestionLevel", self.congestionLevel];
  }
  if (self.hasStopId) {
    [output appendFormat:@"%@%@: %@\n", indent, @"stopId", self.stopId];
  }
  if (self.hasVehicle) {
    [output appendFormat:@"%@%@ {\n", indent, @"vehicle"];
    [self.vehicle writeDescriptionTo:output
                         withIndent:[NSString stringWithFormat:@"%@  ", indent]];
    [output appendFormat:@"%@}\n", indent];
  }
  [self writeExtensionDescriptionToMutableString:(NSMutableString*)output
                                            from:1000
                                              to:2000
                                      withIndent:indent];
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[VehiclePosition class]]) {
    return NO;
  }
  VehiclePosition *otherMessage = other;
  return
      self.hasTrip == otherMessage.hasTrip &&
      (!self.hasTrip || [self.trip isEqual:otherMessage.trip]) &&
      self.hasPosition == otherMessage.hasPosition &&
      (!self.hasPosition || [self.position isEqual:otherMessage.position]) &&
      self.hasCurrentStopSequence == otherMessage.hasCurrentStopSequence &&
      (!self.hasCurrentStopSequence || self.currentStopSequence == otherMessage.currentStopSequence) &&
      self.hasCurrentStatus == otherMessage.hasCurrentStatus &&
      (!self.hasCurrentStatus || self.currentStatus == otherMessage.currentStatus) &&
      self.hasTimestamp == otherMessage.hasTimestamp &&
      (!self.hasTimestamp || self.timestamp == otherMessage.timestamp) &&
      self.hasCongestionLevel == otherMessage.hasCongestionLevel &&
      (!self.hasCongestionLevel || self.congestionLevel == otherMessage.congestionLevel) &&
      self.hasStopId == otherMessage.hasStopId &&
      (!self.hasStopId || [self.stopId isEqual:otherMessage.stopId]) &&
      self.hasVehicle == otherMessage.hasVehicle &&
      (!self.hasVehicle || [self.vehicle isEqual:otherMessage.vehicle]) &&
      [self isEqualExtensionsInOther:otherMessage from:1000 to:2000] &&

      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  __block NSUInteger hashCode = 7;
  if (self.hasTrip) {
    hashCode = hashCode * 31 + [self.trip hash];
  }
  if (self.hasPosition) {
    hashCode = hashCode * 31 + [self.position hash];
  }
  if (self.hasCurrentStopSequence) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInteger:self.currentStopSequence] hash];
  }
  if (self.hasCurrentStatus) {
    hashCode = hashCode * 31 + self.currentStatus;
  }
  if (self.hasTimestamp) {
    hashCode = hashCode * 31 + [[NSNumber numberWithLongLong:self.timestamp] hash];
  }
  if (self.hasCongestionLevel) {
    hashCode = hashCode * 31 + self.congestionLevel;
  }
  if (self.hasStopId) {
    hashCode = hashCode * 31 + [self.stopId hash];
  }
  if (self.hasVehicle) {
    hashCode = hashCode * 31 + [self.vehicle hash];
  }
  hashCode = hashCode * 31 + [self hashExtensionsFrom:1000 to:2000];
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

BOOL VehiclePositionVehicleStopStatusIsValidValue(VehiclePositionVehicleStopStatus value) {
  switch (value) {
    case VehiclePositionVehicleStopStatusIncomingAt:
    case VehiclePositionVehicleStopStatusStoppedAt:
    case VehiclePositionVehicleStopStatusInTransitTo:
      return YES;
    default:
      return NO;
  }
}
BOOL VehiclePositionCongestionLevelIsValidValue(VehiclePositionCongestionLevel value) {
  switch (value) {
    case VehiclePositionCongestionLevelUnknownCongestionLevel:
    case VehiclePositionCongestionLevelRunningSmoothly:
    case VehiclePositionCongestionLevelStopAndGo:
    case VehiclePositionCongestionLevelCongestion:
    case VehiclePositionCongestionLevelSevereCongestion:
      return YES;
    default:
      return NO;
  }
}
@interface VehiclePositionBuilder()
@property (strong) VehiclePosition* result;
@end

@implementation VehiclePositionBuilder
@synthesize result;
- (id) init {
  if ((self = [super init])) {
    self.result = [[VehiclePosition alloc] init];
  }
  return self;
}
- (PBExtendableMessage*) internalGetResult {
  return result;
}
- (VehiclePositionBuilder*) clear {
  self.result = [[VehiclePosition alloc] init];
  return self;
}
- (VehiclePositionBuilder*) clone {
  return [VehiclePosition builderWithPrototype:result];
}
- (VehiclePosition*) defaultInstance {
  return [VehiclePosition defaultInstance];
}
- (VehiclePosition*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (VehiclePosition*) buildPartial {
  VehiclePosition* returnMe = result;
  self.result = nil;
  return returnMe;
}
- (VehiclePositionBuilder*) mergeFrom:(VehiclePosition*) other {
  if (other == [VehiclePosition defaultInstance]) {
    return self;
  }
  if (other.hasTrip) {
    [self mergeTrip:other.trip];
  }
  if (other.hasVehicle) {
    [self mergeVehicle:other.vehicle];
  }
  if (other.hasPosition) {
    [self mergePosition:other.position];
  }
  if (other.hasCurrentStopSequence) {
    [self setCurrentStopSequence:other.currentStopSequence];
  }
  if (other.hasStopId) {
    [self setStopId:other.stopId];
  }
  if (other.hasCurrentStatus) {
    [self setCurrentStatus:other.currentStatus];
  }
  if (other.hasTimestamp) {
    [self setTimestamp:other.timestamp];
  }
  if (other.hasCongestionLevel) {
    [self setCongestionLevel:other.congestionLevel];
  }
  [self mergeExtensionFields:other];
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (VehiclePositionBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (VehiclePositionBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSetBuilder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    SInt32 tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 10: {
        TripDescriptorBuilder* subBuilder = [TripDescriptor builder];
        if (self.hasTrip) {
          [subBuilder mergeFrom:self.trip];
        }
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self setTrip:[subBuilder buildPartial]];
        break;
      }
      case 18: {
        PositionBuilder* subBuilder = [Position builder];
        if (self.hasPosition) {
          [subBuilder mergeFrom:self.position];
        }
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self setPosition:[subBuilder buildPartial]];
        break;
      }
      case 24: {
        [self setCurrentStopSequence:[input readUInt32]];
        break;
      }
      case 32: {
        VehiclePositionVehicleStopStatus value = (VehiclePositionVehicleStopStatus)[input readEnum];
        if (VehiclePositionVehicleStopStatusIsValidValue(value)) {
          [self setCurrentStatus:value];
        } else {
          [unknownFields mergeVarintField:4 value:value];
        }
        break;
      }
      case 40: {
        [self setTimestamp:[input readUInt64]];
        break;
      }
      case 48: {
        VehiclePositionCongestionLevel value = (VehiclePositionCongestionLevel)[input readEnum];
        if (VehiclePositionCongestionLevelIsValidValue(value)) {
          [self setCongestionLevel:value];
        } else {
          [unknownFields mergeVarintField:6 value:value];
        }
        break;
      }
      case 58: {
        [self setStopId:[input readString]];
        break;
      }
      case 66: {
        VehicleDescriptorBuilder* subBuilder = [VehicleDescriptor builder];
        if (self.hasVehicle) {
          [subBuilder mergeFrom:self.vehicle];
        }
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self setVehicle:[subBuilder buildPartial]];
        break;
      }
    }
  }
}
- (BOOL) hasTrip {
  return result.hasTrip;
}
- (TripDescriptor*) trip {
  return result.trip;
}
- (VehiclePositionBuilder*) setTrip:(TripDescriptor*) value {
  result.hasTrip = YES;
  result.trip = value;
  return self;
}
- (VehiclePositionBuilder*) setTripBuilder:(TripDescriptorBuilder*) builderForValue {
  return [self setTrip:[builderForValue build]];
}
- (VehiclePositionBuilder*) mergeTrip:(TripDescriptor*) value {
  if (result.hasTrip &&
      result.trip != [TripDescriptor defaultInstance]) {
    result.trip =
      [[[TripDescriptor builderWithPrototype:result.trip] mergeFrom:value] buildPartial];
  } else {
    result.trip = value;
  }
  result.hasTrip = YES;
  return self;
}
- (VehiclePositionBuilder*) clearTrip {
  result.hasTrip = NO;
  result.trip = [TripDescriptor defaultInstance];
  return self;
}
- (BOOL) hasVehicle {
  return result.hasVehicle;
}
- (VehicleDescriptor*) vehicle {
  return result.vehicle;
}
- (VehiclePositionBuilder*) setVehicle:(VehicleDescriptor*) value {
  result.hasVehicle = YES;
  result.vehicle = value;
  return self;
}
- (VehiclePositionBuilder*) setVehicleBuilder:(VehicleDescriptorBuilder*) builderForValue {
  return [self setVehicle:[builderForValue build]];
}
- (VehiclePositionBuilder*) mergeVehicle:(VehicleDescriptor*) value {
  if (result.hasVehicle &&
      result.vehicle != [VehicleDescriptor defaultInstance]) {
    result.vehicle =
      [[[VehicleDescriptor builderWithPrototype:result.vehicle] mergeFrom:value] buildPartial];
  } else {
    result.vehicle = value;
  }
  result.hasVehicle = YES;
  return self;
}
- (VehiclePositionBuilder*) clearVehicle {
  result.hasVehicle = NO;
  result.vehicle = [VehicleDescriptor defaultInstance];
  return self;
}
- (BOOL) hasPosition {
  return result.hasPosition;
}
- (Position*) position {
  return result.position;
}
- (VehiclePositionBuilder*) setPosition:(Position*) value {
  result.hasPosition = YES;
  result.position = value;
  return self;
}
- (VehiclePositionBuilder*) setPositionBuilder:(PositionBuilder*) builderForValue {
  return [self setPosition:[builderForValue build]];
}
- (VehiclePositionBuilder*) mergePosition:(Position*) value {
  if (result.hasPosition &&
      result.position != [Position defaultInstance]) {
    result.position =
      [[[Position builderWithPrototype:result.position] mergeFrom:value] buildPartial];
  } else {
    result.position = value;
  }
  result.hasPosition = YES;
  return self;
}
- (VehiclePositionBuilder*) clearPosition {
  result.hasPosition = NO;
  result.position = [Position defaultInstance];
  return self;
}
- (BOOL) hasCurrentStopSequence {
  return result.hasCurrentStopSequence;
}
- (UInt32) currentStopSequence {
  return result.currentStopSequence;
}
- (VehiclePositionBuilder*) setCurrentStopSequence:(UInt32) value {
  result.hasCurrentStopSequence = YES;
  result.currentStopSequence = value;
  return self;
}
- (VehiclePositionBuilder*) clearCurrentStopSequence {
  result.hasCurrentStopSequence = NO;
  result.currentStopSequence = 0;
  return self;
}
- (BOOL) hasStopId {
  return result.hasStopId;
}
- (NSString*) stopId {
  return result.stopId;
}
- (VehiclePositionBuilder*) setStopId:(NSString*) value {
  result.hasStopId = YES;
  result.stopId = value;
  return self;
}
- (VehiclePositionBuilder*) clearStopId {
  result.hasStopId = NO;
  result.stopId = @"";
  return self;
}
- (BOOL) hasCurrentStatus {
  return result.hasCurrentStatus;
}
- (VehiclePositionVehicleStopStatus) currentStatus {
  return result.currentStatus;
}
- (VehiclePositionBuilder*) setCurrentStatus:(VehiclePositionVehicleStopStatus) value {
  result.hasCurrentStatus = YES;
  result.currentStatus = value;
  return self;
}
- (VehiclePositionBuilder*) clearCurrentStatus {
  result.hasCurrentStatus = NO;
  result.currentStatus = VehiclePositionVehicleStopStatusInTransitTo;
  return self;
}
- (BOOL) hasTimestamp {
  return result.hasTimestamp;
}
- (UInt64) timestamp {
  return result.timestamp;
}
- (VehiclePositionBuilder*) setTimestamp:(UInt64) value {
  result.hasTimestamp = YES;
  result.timestamp = value;
  return self;
}
- (VehiclePositionBuilder*) clearTimestamp {
  result.hasTimestamp = NO;
  result.timestamp = 0L;
  return self;
}
- (BOOL) hasCongestionLevel {
  return result.hasCongestionLevel;
}
- (VehiclePositionCongestionLevel) congestionLevel {
  return result.congestionLevel;
}
- (VehiclePositionBuilder*) setCongestionLevel:(VehiclePositionCongestionLevel) value {
  result.hasCongestionLevel = YES;
  result.congestionLevel = value;
  return self;
}
- (VehiclePositionBuilder*) clearCongestionLevel {
  result.hasCongestionLevel = NO;
  result.congestionLevel = VehiclePositionCongestionLevelUnknownCongestionLevel;
  return self;
}
@end

@interface Alert ()
@property (strong) NSMutableArray * activePeriodArray;
@property (strong) NSMutableArray * informedEntityArray;
@property AlertCause cause;
@property AlertEffect effect;
@property (strong) TranslatedString* url;
@property (strong) TranslatedString* headerText;
@property (strong) TranslatedString* descriptionText;
@end

@implementation Alert

@synthesize activePeriodArray;
@dynamic activePeriod;
@synthesize informedEntityArray;
@dynamic informedEntity;
- (BOOL) hasCause {
  return !!hasCause_;
}
- (void) setHasCause:(BOOL) value_ {
  hasCause_ = !!value_;
}
@synthesize cause;
- (BOOL) hasEffect {
  return !!hasEffect_;
}
- (void) setHasEffect:(BOOL) value_ {
  hasEffect_ = !!value_;
}
@synthesize effect;
- (BOOL) hasUrl {
  return !!hasUrl_;
}
- (void) setHasUrl:(BOOL) value_ {
  hasUrl_ = !!value_;
}
@synthesize url;
- (BOOL) hasHeaderText {
  return !!hasHeaderText_;
}
- (void) setHasHeaderText:(BOOL) value_ {
  hasHeaderText_ = !!value_;
}
@synthesize headerText;
- (BOOL) hasDescriptionText {
  return !!hasDescriptionText_;
}
- (void) setHasDescriptionText:(BOOL) value_ {
  hasDescriptionText_ = !!value_;
}
@synthesize descriptionText;
- (id) init {
  if ((self = [super init])) {
    self.cause = AlertCauseUnknownCause;
    self.effect = AlertEffectUnknownEffect;
    self.url = [TranslatedString defaultInstance];
    self.headerText = [TranslatedString defaultInstance];
    self.descriptionText = [TranslatedString defaultInstance];
  }
  return self;
}
static Alert* defaultAlertInstance = nil;
+ (void) initialize {
  if (self == [Alert class]) {
    defaultAlertInstance = [[Alert alloc] init];
  }
}
+ (Alert*) defaultInstance {
  return defaultAlertInstance;
}
- (Alert*) defaultInstance {
  return defaultAlertInstance;
}
- (NSArray *)activePeriod {
  return activePeriodArray;
}
- (TimeRange*)activePeriodAtIndex:(NSUInteger)index {
  return [activePeriodArray objectAtIndex:index];
}
- (NSArray *)informedEntity {
  return informedEntityArray;
}
- (EntitySelector*)informedEntityAtIndex:(NSUInteger)index {
  return [informedEntityArray objectAtIndex:index];
}
- (BOOL) isInitialized {
  __block BOOL isInitinformedEntity = YES;
   [self.informedEntity enumerateObjectsUsingBlock:^(EntitySelector *element, NSUInteger idx, BOOL *stop) {
    if (!element.isInitialized) {
      isInitinformedEntity = NO;
      *stop = YES;
    }
  }];
  if (!isInitinformedEntity) return isInitinformedEntity;
  if (self.hasUrl) {
    if (!self.url.isInitialized) {
      return NO;
    }
  }
  if (self.hasHeaderText) {
    if (!self.headerText.isInitialized) {
      return NO;
    }
  }
  if (self.hasDescriptionText) {
    if (!self.descriptionText.isInitialized) {
      return NO;
    }
  }
  if (!self.extensionsAreInitialized) {
    return NO;
  }
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  [self.activePeriodArray enumerateObjectsUsingBlock:^(TimeRange *element, NSUInteger idx, BOOL *stop) {
    [output writeMessage:1 value:element];
  }];
  [self.informedEntityArray enumerateObjectsUsingBlock:^(EntitySelector *element, NSUInteger idx, BOOL *stop) {
    [output writeMessage:5 value:element];
  }];
  if (self.hasCause) {
    [output writeEnum:6 value:self.cause];
  }
  if (self.hasEffect) {
    [output writeEnum:7 value:self.effect];
  }
  if (self.hasUrl) {
    [output writeMessage:8 value:self.url];
  }
  if (self.hasHeaderText) {
    [output writeMessage:10 value:self.headerText];
  }
  if (self.hasDescriptionText) {
    [output writeMessage:11 value:self.descriptionText];
  }
  [self writeExtensionsToCodedOutputStream:output
                                      from:1000
                                        to:2000];
  [self.unknownFields writeToCodedOutputStream:output];
}
- (SInt32) serializedSize {
  __block SInt32 size_ = memoizedSerializedSize;
  if (size_ != -1) {
    return size_;
  }

  size_ = 0;
  [self.activePeriodArray enumerateObjectsUsingBlock:^(TimeRange *element, NSUInteger idx, BOOL *stop) {
    size_ += computeMessageSize(1, element);
  }];
  [self.informedEntityArray enumerateObjectsUsingBlock:^(EntitySelector *element, NSUInteger idx, BOOL *stop) {
    size_ += computeMessageSize(5, element);
  }];
  if (self.hasCause) {
    size_ += computeEnumSize(6, self.cause);
  }
  if (self.hasEffect) {
    size_ += computeEnumSize(7, self.effect);
  }
  if (self.hasUrl) {
    size_ += computeMessageSize(8, self.url);
  }
  if (self.hasHeaderText) {
    size_ += computeMessageSize(10, self.headerText);
  }
  if (self.hasDescriptionText) {
    size_ += computeMessageSize(11, self.descriptionText);
  }
  size_ += [self extensionsSerializedSize];
  size_ += self.unknownFields.serializedSize;
  memoizedSerializedSize = size_;
  return size_;
}
+ (Alert*) parseFromData:(NSData*) data {
  return (Alert*)[[[Alert builder] mergeFromData:data] build];
}
+ (Alert*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (Alert*)[[[Alert builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (Alert*) parseFromInputStream:(NSInputStream*) input {
  return (Alert*)[[[Alert builder] mergeFromInputStream:input] build];
}
+ (Alert*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (Alert*)[[[Alert builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (Alert*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (Alert*)[[[Alert builder] mergeFromCodedInputStream:input] build];
}
+ (Alert*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (Alert*)[[[Alert builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (AlertBuilder*) builder {
  return [[AlertBuilder alloc] init];
}
+ (AlertBuilder*) builderWithPrototype:(Alert*) prototype {
  return [[Alert builder] mergeFrom:prototype];
}
- (AlertBuilder*) builder {
  return [Alert builder];
}
- (AlertBuilder*) toBuilder {
  return [Alert builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  [self.activePeriodArray enumerateObjectsUsingBlock:^(TimeRange *element, NSUInteger idx, BOOL *stop) {
    [output appendFormat:@"%@%@ {\n", indent, @"activePeriod"];
    [element writeDescriptionTo:output
                     withIndent:[NSString stringWithFormat:@"%@  ", indent]];
    [output appendFormat:@"%@}\n", indent];
  }];
  [self.informedEntityArray enumerateObjectsUsingBlock:^(EntitySelector *element, NSUInteger idx, BOOL *stop) {
    [output appendFormat:@"%@%@ {\n", indent, @"informedEntity"];
    [element writeDescriptionTo:output
                     withIndent:[NSString stringWithFormat:@"%@  ", indent]];
    [output appendFormat:@"%@}\n", indent];
  }];
  if (self.hasCause) {
    [output appendFormat:@"%@%@: %d\n", indent, @"cause", self.cause];
  }
  if (self.hasEffect) {
    [output appendFormat:@"%@%@: %d\n", indent, @"effect", self.effect];
  }
  if (self.hasUrl) {
    [output appendFormat:@"%@%@ {\n", indent, @"url"];
    [self.url writeDescriptionTo:output
                         withIndent:[NSString stringWithFormat:@"%@  ", indent]];
    [output appendFormat:@"%@}\n", indent];
  }
  if (self.hasHeaderText) {
    [output appendFormat:@"%@%@ {\n", indent, @"headerText"];
    [self.headerText writeDescriptionTo:output
                         withIndent:[NSString stringWithFormat:@"%@  ", indent]];
    [output appendFormat:@"%@}\n", indent];
  }
  if (self.hasDescriptionText) {
    [output appendFormat:@"%@%@ {\n", indent, @"descriptionText"];
    [self.descriptionText writeDescriptionTo:output
                         withIndent:[NSString stringWithFormat:@"%@  ", indent]];
    [output appendFormat:@"%@}\n", indent];
  }
  [self writeExtensionDescriptionToMutableString:(NSMutableString*)output
                                            from:1000
                                              to:2000
                                      withIndent:indent];
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[Alert class]]) {
    return NO;
  }
  Alert *otherMessage = other;
  return
      [self.activePeriodArray isEqualToArray:otherMessage.activePeriodArray] &&
      [self.informedEntityArray isEqualToArray:otherMessage.informedEntityArray] &&
      self.hasCause == otherMessage.hasCause &&
      (!self.hasCause || self.cause == otherMessage.cause) &&
      self.hasEffect == otherMessage.hasEffect &&
      (!self.hasEffect || self.effect == otherMessage.effect) &&
      self.hasUrl == otherMessage.hasUrl &&
      (!self.hasUrl || [self.url isEqual:otherMessage.url]) &&
      self.hasHeaderText == otherMessage.hasHeaderText &&
      (!self.hasHeaderText || [self.headerText isEqual:otherMessage.headerText]) &&
      self.hasDescriptionText == otherMessage.hasDescriptionText &&
      (!self.hasDescriptionText || [self.descriptionText isEqual:otherMessage.descriptionText]) &&
      [self isEqualExtensionsInOther:otherMessage from:1000 to:2000] &&

      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  __block NSUInteger hashCode = 7;
  [self.activePeriodArray enumerateObjectsUsingBlock:^(TimeRange *element, NSUInteger idx, BOOL *stop) {
    hashCode = hashCode * 31 + [element hash];
  }];
  [self.informedEntityArray enumerateObjectsUsingBlock:^(EntitySelector *element, NSUInteger idx, BOOL *stop) {
    hashCode = hashCode * 31 + [element hash];
  }];
  if (self.hasCause) {
    hashCode = hashCode * 31 + self.cause;
  }
  if (self.hasEffect) {
    hashCode = hashCode * 31 + self.effect;
  }
  if (self.hasUrl) {
    hashCode = hashCode * 31 + [self.url hash];
  }
  if (self.hasHeaderText) {
    hashCode = hashCode * 31 + [self.headerText hash];
  }
  if (self.hasDescriptionText) {
    hashCode = hashCode * 31 + [self.descriptionText hash];
  }
  hashCode = hashCode * 31 + [self hashExtensionsFrom:1000 to:2000];
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

BOOL AlertCauseIsValidValue(AlertCause value) {
  switch (value) {
    case AlertCauseUnknownCause:
    case AlertCauseOtherCause:
    case AlertCauseTechnicalProblem:
    case AlertCauseStrike:
    case AlertCauseDemonstration:
    case AlertCauseAccident:
    case AlertCauseHoliday:
    case AlertCauseWeather:
    case AlertCauseMaintenance:
    case AlertCauseConstruction:
    case AlertCausePoliceActivity:
    case AlertCauseMedicalEmergency:
      return YES;
    default:
      return NO;
  }
}
BOOL AlertEffectIsValidValue(AlertEffect value) {
  switch (value) {
    case AlertEffectNoService:
    case AlertEffectReducedService:
    case AlertEffectSignificantDelays:
    case AlertEffectDetour:
    case AlertEffectAdditionalService:
    case AlertEffectModifiedService:
    case AlertEffectOtherEffect:
    case AlertEffectUnknownEffect:
    case AlertEffectStopMoved:
      return YES;
    default:
      return NO;
  }
}
@interface AlertBuilder()
@property (strong) Alert* result;
@end

@implementation AlertBuilder
@synthesize result;
- (id) init {
  if ((self = [super init])) {
    self.result = [[Alert alloc] init];
  }
  return self;
}
- (PBExtendableMessage*) internalGetResult {
  return result;
}
- (AlertBuilder*) clear {
  self.result = [[Alert alloc] init];
  return self;
}
- (AlertBuilder*) clone {
  return [Alert builderWithPrototype:result];
}
- (Alert*) defaultInstance {
  return [Alert defaultInstance];
}
- (Alert*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (Alert*) buildPartial {
  Alert* returnMe = result;
  self.result = nil;
  return returnMe;
}
- (AlertBuilder*) mergeFrom:(Alert*) other {
  if (other == [Alert defaultInstance]) {
    return self;
  }
  if (other.activePeriodArray.count > 0) {
    if (result.activePeriodArray == nil) {
      result.activePeriodArray = [[NSMutableArray alloc] initWithArray:other.activePeriodArray];
    } else {
      [result.activePeriodArray addObjectsFromArray:other.activePeriodArray];
    }
  }
  if (other.informedEntityArray.count > 0) {
    if (result.informedEntityArray == nil) {
      result.informedEntityArray = [[NSMutableArray alloc] initWithArray:other.informedEntityArray];
    } else {
      [result.informedEntityArray addObjectsFromArray:other.informedEntityArray];
    }
  }
  if (other.hasCause) {
    [self setCause:other.cause];
  }
  if (other.hasEffect) {
    [self setEffect:other.effect];
  }
  if (other.hasUrl) {
    [self mergeUrl:other.url];
  }
  if (other.hasHeaderText) {
    [self mergeHeaderText:other.headerText];
  }
  if (other.hasDescriptionText) {
    [self mergeDescriptionText:other.descriptionText];
  }
  [self mergeExtensionFields:other];
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (AlertBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (AlertBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSetBuilder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    SInt32 tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 10: {
        TimeRangeBuilder* subBuilder = [TimeRange builder];
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self addActivePeriod:[subBuilder buildPartial]];
        break;
      }
      case 42: {
        EntitySelectorBuilder* subBuilder = [EntitySelector builder];
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self addInformedEntity:[subBuilder buildPartial]];
        break;
      }
      case 48: {
        AlertCause value = (AlertCause)[input readEnum];
        if (AlertCauseIsValidValue(value)) {
          [self setCause:value];
        } else {
          [unknownFields mergeVarintField:6 value:value];
        }
        break;
      }
      case 56: {
        AlertEffect value = (AlertEffect)[input readEnum];
        if (AlertEffectIsValidValue(value)) {
          [self setEffect:value];
        } else {
          [unknownFields mergeVarintField:7 value:value];
        }
        break;
      }
      case 66: {
        TranslatedStringBuilder* subBuilder = [TranslatedString builder];
        if (self.hasUrl) {
          [subBuilder mergeFrom:self.url];
        }
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self setUrl:[subBuilder buildPartial]];
        break;
      }
      case 82: {
        TranslatedStringBuilder* subBuilder = [TranslatedString builder];
        if (self.hasHeaderText) {
          [subBuilder mergeFrom:self.headerText];
        }
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self setHeaderText:[subBuilder buildPartial]];
        break;
      }
      case 90: {
        TranslatedStringBuilder* subBuilder = [TranslatedString builder];
        if (self.hasDescriptionText) {
          [subBuilder mergeFrom:self.descriptionText];
        }
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self setDescriptionText:[subBuilder buildPartial]];
        break;
      }
    }
  }
}
- (NSMutableArray *)activePeriod {
  return result.activePeriodArray;
}
- (TimeRange*)activePeriodAtIndex:(NSUInteger)index {
  return [result activePeriodAtIndex:index];
}
- (AlertBuilder *)addActivePeriod:(TimeRange*)value {
  if (result.activePeriodArray == nil) {
    result.activePeriodArray = [[NSMutableArray alloc]init];
  }
  [result.activePeriodArray addObject:value];
  return self;
}
- (AlertBuilder *)setActivePeriodArray:(NSArray *)array {
  result.activePeriodArray = [[NSMutableArray alloc]initWithArray:array];
  return self;
}
- (AlertBuilder *)clearActivePeriod {
  result.activePeriodArray = nil;
  return self;
}
- (NSMutableArray *)informedEntity {
  return result.informedEntityArray;
}
- (EntitySelector*)informedEntityAtIndex:(NSUInteger)index {
  return [result informedEntityAtIndex:index];
}
- (AlertBuilder *)addInformedEntity:(EntitySelector*)value {
  if (result.informedEntityArray == nil) {
    result.informedEntityArray = [[NSMutableArray alloc]init];
  }
  [result.informedEntityArray addObject:value];
  return self;
}
- (AlertBuilder *)setInformedEntityArray:(NSArray *)array {
  result.informedEntityArray = [[NSMutableArray alloc]initWithArray:array];
  return self;
}
- (AlertBuilder *)clearInformedEntity {
  result.informedEntityArray = nil;
  return self;
}
- (BOOL) hasCause {
  return result.hasCause;
}
- (AlertCause) cause {
  return result.cause;
}
- (AlertBuilder*) setCause:(AlertCause) value {
  result.hasCause = YES;
  result.cause = value;
  return self;
}
- (AlertBuilder*) clearCause {
  result.hasCause = NO;
  result.cause = AlertCauseUnknownCause;
  return self;
}
- (BOOL) hasEffect {
  return result.hasEffect;
}
- (AlertEffect) effect {
  return result.effect;
}
- (AlertBuilder*) setEffect:(AlertEffect) value {
  result.hasEffect = YES;
  result.effect = value;
  return self;
}
- (AlertBuilder*) clearEffect {
  result.hasEffect = NO;
  result.effect = AlertEffectUnknownEffect;
  return self;
}
- (BOOL) hasUrl {
  return result.hasUrl;
}
- (TranslatedString*) url {
  return result.url;
}
- (AlertBuilder*) setUrl:(TranslatedString*) value {
  result.hasUrl = YES;
  result.url = value;
  return self;
}
- (AlertBuilder*) setUrlBuilder:(TranslatedStringBuilder*) builderForValue {
  return [self setUrl:[builderForValue build]];
}
- (AlertBuilder*) mergeUrl:(TranslatedString*) value {
  if (result.hasUrl &&
      result.url != [TranslatedString defaultInstance]) {
    result.url =
      [[[TranslatedString builderWithPrototype:result.url] mergeFrom:value] buildPartial];
  } else {
    result.url = value;
  }
  result.hasUrl = YES;
  return self;
}
- (AlertBuilder*) clearUrl {
  result.hasUrl = NO;
  result.url = [TranslatedString defaultInstance];
  return self;
}
- (BOOL) hasHeaderText {
  return result.hasHeaderText;
}
- (TranslatedString*) headerText {
  return result.headerText;
}
- (AlertBuilder*) setHeaderText:(TranslatedString*) value {
  result.hasHeaderText = YES;
  result.headerText = value;
  return self;
}
- (AlertBuilder*) setHeaderTextBuilder:(TranslatedStringBuilder*) builderForValue {
  return [self setHeaderText:[builderForValue build]];
}
- (AlertBuilder*) mergeHeaderText:(TranslatedString*) value {
  if (result.hasHeaderText &&
      result.headerText != [TranslatedString defaultInstance]) {
    result.headerText =
      [[[TranslatedString builderWithPrototype:result.headerText] mergeFrom:value] buildPartial];
  } else {
    result.headerText = value;
  }
  result.hasHeaderText = YES;
  return self;
}
- (AlertBuilder*) clearHeaderText {
  result.hasHeaderText = NO;
  result.headerText = [TranslatedString defaultInstance];
  return self;
}
- (BOOL) hasDescriptionText {
  return result.hasDescriptionText;
}
- (TranslatedString*) descriptionText {
  return result.descriptionText;
}
- (AlertBuilder*) setDescriptionText:(TranslatedString*) value {
  result.hasDescriptionText = YES;
  result.descriptionText = value;
  return self;
}
- (AlertBuilder*) setDescriptionTextBuilder:(TranslatedStringBuilder*) builderForValue {
  return [self setDescriptionText:[builderForValue build]];
}
- (AlertBuilder*) mergeDescriptionText:(TranslatedString*) value {
  if (result.hasDescriptionText &&
      result.descriptionText != [TranslatedString defaultInstance]) {
    result.descriptionText =
      [[[TranslatedString builderWithPrototype:result.descriptionText] mergeFrom:value] buildPartial];
  } else {
    result.descriptionText = value;
  }
  result.hasDescriptionText = YES;
  return self;
}
- (AlertBuilder*) clearDescriptionText {
  result.hasDescriptionText = NO;
  result.descriptionText = [TranslatedString defaultInstance];
  return self;
}
@end

@interface TimeRange ()
@property UInt64 start;
@property UInt64 end;
@end

@implementation TimeRange

- (BOOL) hasStart {
  return !!hasStart_;
}
- (void) setHasStart:(BOOL) value_ {
  hasStart_ = !!value_;
}
@synthesize start;
- (BOOL) hasEnd {
  return !!hasEnd_;
}
- (void) setHasEnd:(BOOL) value_ {
  hasEnd_ = !!value_;
}
@synthesize end;
- (id) init {
  if ((self = [super init])) {
    self.start = 0L;
    self.end = 0L;
  }
  return self;
}
static TimeRange* defaultTimeRangeInstance = nil;
+ (void) initialize {
  if (self == [TimeRange class]) {
    defaultTimeRangeInstance = [[TimeRange alloc] init];
  }
}
+ (TimeRange*) defaultInstance {
  return defaultTimeRangeInstance;
}
- (TimeRange*) defaultInstance {
  return defaultTimeRangeInstance;
}
- (BOOL) isInitialized {
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasStart) {
    [output writeUInt64:1 value:self.start];
  }
  if (self.hasEnd) {
    [output writeUInt64:2 value:self.end];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (SInt32) serializedSize {
  __block SInt32 size_ = memoizedSerializedSize;
  if (size_ != -1) {
    return size_;
  }

  size_ = 0;
  if (self.hasStart) {
    size_ += computeUInt64Size(1, self.start);
  }
  if (self.hasEnd) {
    size_ += computeUInt64Size(2, self.end);
  }
  size_ += self.unknownFields.serializedSize;
  memoizedSerializedSize = size_;
  return size_;
}
+ (TimeRange*) parseFromData:(NSData*) data {
  return (TimeRange*)[[[TimeRange builder] mergeFromData:data] build];
}
+ (TimeRange*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (TimeRange*)[[[TimeRange builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (TimeRange*) parseFromInputStream:(NSInputStream*) input {
  return (TimeRange*)[[[TimeRange builder] mergeFromInputStream:input] build];
}
+ (TimeRange*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (TimeRange*)[[[TimeRange builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (TimeRange*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (TimeRange*)[[[TimeRange builder] mergeFromCodedInputStream:input] build];
}
+ (TimeRange*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (TimeRange*)[[[TimeRange builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (TimeRangeBuilder*) builder {
  return [[TimeRangeBuilder alloc] init];
}
+ (TimeRangeBuilder*) builderWithPrototype:(TimeRange*) prototype {
  return [[TimeRange builder] mergeFrom:prototype];
}
- (TimeRangeBuilder*) builder {
  return [TimeRange builder];
}
- (TimeRangeBuilder*) toBuilder {
  return [TimeRange builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  if (self.hasStart) {
    [output appendFormat:@"%@%@: %@\n", indent, @"start", [NSNumber numberWithLongLong:self.start]];
  }
  if (self.hasEnd) {
    [output appendFormat:@"%@%@: %@\n", indent, @"end", [NSNumber numberWithLongLong:self.end]];
  }
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[TimeRange class]]) {
    return NO;
  }
  TimeRange *otherMessage = other;
  return
      self.hasStart == otherMessage.hasStart &&
      (!self.hasStart || self.start == otherMessage.start) &&
      self.hasEnd == otherMessage.hasEnd &&
      (!self.hasEnd || self.end == otherMessage.end) &&
      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  __block NSUInteger hashCode = 7;
  if (self.hasStart) {
    hashCode = hashCode * 31 + [[NSNumber numberWithLongLong:self.start] hash];
  }
  if (self.hasEnd) {
    hashCode = hashCode * 31 + [[NSNumber numberWithLongLong:self.end] hash];
  }
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

@interface TimeRangeBuilder()
@property (strong) TimeRange* result;
@end

@implementation TimeRangeBuilder
@synthesize result;
- (id) init {
  if ((self = [super init])) {
    self.result = [[TimeRange alloc] init];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return result;
}
- (TimeRangeBuilder*) clear {
  self.result = [[TimeRange alloc] init];
  return self;
}
- (TimeRangeBuilder*) clone {
  return [TimeRange builderWithPrototype:result];
}
- (TimeRange*) defaultInstance {
  return [TimeRange defaultInstance];
}
- (TimeRange*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (TimeRange*) buildPartial {
  TimeRange* returnMe = result;
  self.result = nil;
  return returnMe;
}
- (TimeRangeBuilder*) mergeFrom:(TimeRange*) other {
  if (other == [TimeRange defaultInstance]) {
    return self;
  }
  if (other.hasStart) {
    [self setStart:other.start];
  }
  if (other.hasEnd) {
    [self setEnd:other.end];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (TimeRangeBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (TimeRangeBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSetBuilder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    SInt32 tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 8: {
        [self setStart:[input readUInt64]];
        break;
      }
      case 16: {
        [self setEnd:[input readUInt64]];
        break;
      }
    }
  }
}
- (BOOL) hasStart {
  return result.hasStart;
}
- (UInt64) start {
  return result.start;
}
- (TimeRangeBuilder*) setStart:(UInt64) value {
  result.hasStart = YES;
  result.start = value;
  return self;
}
- (TimeRangeBuilder*) clearStart {
  result.hasStart = NO;
  result.start = 0L;
  return self;
}
- (BOOL) hasEnd {
  return result.hasEnd;
}
- (UInt64) end {
  return result.end;
}
- (TimeRangeBuilder*) setEnd:(UInt64) value {
  result.hasEnd = YES;
  result.end = value;
  return self;
}
- (TimeRangeBuilder*) clearEnd {
  result.hasEnd = NO;
  result.end = 0L;
  return self;
}
@end

@interface Position ()
@property Float32 latitude;
@property Float32 longitude;
@property Float32 bearing;
@property Float64 odometer;
@property Float32 speed;
@end

@implementation Position

- (BOOL) hasLatitude {
  return !!hasLatitude_;
}
- (void) setHasLatitude:(BOOL) value_ {
  hasLatitude_ = !!value_;
}
@synthesize latitude;
- (BOOL) hasLongitude {
  return !!hasLongitude_;
}
- (void) setHasLongitude:(BOOL) value_ {
  hasLongitude_ = !!value_;
}
@synthesize longitude;
- (BOOL) hasBearing {
  return !!hasBearing_;
}
- (void) setHasBearing:(BOOL) value_ {
  hasBearing_ = !!value_;
}
@synthesize bearing;
- (BOOL) hasOdometer {
  return !!hasOdometer_;
}
- (void) setHasOdometer:(BOOL) value_ {
  hasOdometer_ = !!value_;
}
@synthesize odometer;
- (BOOL) hasSpeed {
  return !!hasSpeed_;
}
- (void) setHasSpeed:(BOOL) value_ {
  hasSpeed_ = !!value_;
}
@synthesize speed;
- (id) init {
  if ((self = [super init])) {
    self.latitude = 0;
    self.longitude = 0;
    self.bearing = 0;
    self.odometer = 0;
    self.speed = 0;
  }
  return self;
}
static Position* defaultPositionInstance = nil;
+ (void) initialize {
  if (self == [Position class]) {
    defaultPositionInstance = [[Position alloc] init];
  }
}
+ (Position*) defaultInstance {
  return defaultPositionInstance;
}
- (Position*) defaultInstance {
  return defaultPositionInstance;
}
- (BOOL) isInitialized {
  if (!self.hasLatitude) {
    return NO;
  }
  if (!self.hasLongitude) {
    return NO;
  }
  if (!self.extensionsAreInitialized) {
    return NO;
  }
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasLatitude) {
    [output writeFloat:1 value:self.latitude];
  }
  if (self.hasLongitude) {
    [output writeFloat:2 value:self.longitude];
  }
  if (self.hasBearing) {
    [output writeFloat:3 value:self.bearing];
  }
  if (self.hasOdometer) {
    [output writeDouble:4 value:self.odometer];
  }
  if (self.hasSpeed) {
    [output writeFloat:5 value:self.speed];
  }
  [self writeExtensionsToCodedOutputStream:output
                                      from:1000
                                        to:2000];
  [self.unknownFields writeToCodedOutputStream:output];
}
- (SInt32) serializedSize {
  __block SInt32 size_ = memoizedSerializedSize;
  if (size_ != -1) {
    return size_;
  }

  size_ = 0;
  if (self.hasLatitude) {
    size_ += computeFloatSize(1, self.latitude);
  }
  if (self.hasLongitude) {
    size_ += computeFloatSize(2, self.longitude);
  }
  if (self.hasBearing) {
    size_ += computeFloatSize(3, self.bearing);
  }
  if (self.hasOdometer) {
    size_ += computeDoubleSize(4, self.odometer);
  }
  if (self.hasSpeed) {
    size_ += computeFloatSize(5, self.speed);
  }
  size_ += [self extensionsSerializedSize];
  size_ += self.unknownFields.serializedSize;
  memoizedSerializedSize = size_;
  return size_;
}
+ (Position*) parseFromData:(NSData*) data {
  return (Position*)[[[Position builder] mergeFromData:data] build];
}
+ (Position*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (Position*)[[[Position builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (Position*) parseFromInputStream:(NSInputStream*) input {
  return (Position*)[[[Position builder] mergeFromInputStream:input] build];
}
+ (Position*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (Position*)[[[Position builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (Position*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (Position*)[[[Position builder] mergeFromCodedInputStream:input] build];
}
+ (Position*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (Position*)[[[Position builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (PositionBuilder*) builder {
  return [[PositionBuilder alloc] init];
}
+ (PositionBuilder*) builderWithPrototype:(Position*) prototype {
  return [[Position builder] mergeFrom:prototype];
}
- (PositionBuilder*) builder {
  return [Position builder];
}
- (PositionBuilder*) toBuilder {
  return [Position builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  if (self.hasLatitude) {
    [output appendFormat:@"%@%@: %@\n", indent, @"latitude", [NSNumber numberWithFloat:self.latitude]];
  }
  if (self.hasLongitude) {
    [output appendFormat:@"%@%@: %@\n", indent, @"longitude", [NSNumber numberWithFloat:self.longitude]];
  }
  if (self.hasBearing) {
    [output appendFormat:@"%@%@: %@\n", indent, @"bearing", [NSNumber numberWithFloat:self.bearing]];
  }
  if (self.hasOdometer) {
    [output appendFormat:@"%@%@: %@\n", indent, @"odometer", [NSNumber numberWithDouble:self.odometer]];
  }
  if (self.hasSpeed) {
    [output appendFormat:@"%@%@: %@\n", indent, @"speed", [NSNumber numberWithFloat:self.speed]];
  }
  [self writeExtensionDescriptionToMutableString:(NSMutableString*)output
                                            from:1000
                                              to:2000
                                      withIndent:indent];
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[Position class]]) {
    return NO;
  }
  Position *otherMessage = other;
  return
      self.hasLatitude == otherMessage.hasLatitude &&
      (!self.hasLatitude || self.latitude == otherMessage.latitude) &&
      self.hasLongitude == otherMessage.hasLongitude &&
      (!self.hasLongitude || self.longitude == otherMessage.longitude) &&
      self.hasBearing == otherMessage.hasBearing &&
      (!self.hasBearing || self.bearing == otherMessage.bearing) &&
      self.hasOdometer == otherMessage.hasOdometer &&
      (!self.hasOdometer || self.odometer == otherMessage.odometer) &&
      self.hasSpeed == otherMessage.hasSpeed &&
      (!self.hasSpeed || self.speed == otherMessage.speed) &&
      [self isEqualExtensionsInOther:otherMessage from:1000 to:2000] &&

      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  __block NSUInteger hashCode = 7;
  if (self.hasLatitude) {
    hashCode = hashCode * 31 + [[NSNumber numberWithFloat:self.latitude] hash];
  }
  if (self.hasLongitude) {
    hashCode = hashCode * 31 + [[NSNumber numberWithFloat:self.longitude] hash];
  }
  if (self.hasBearing) {
    hashCode = hashCode * 31 + [[NSNumber numberWithFloat:self.bearing] hash];
  }
  if (self.hasOdometer) {
    hashCode = hashCode * 31 + [[NSNumber numberWithDouble:self.odometer] hash];
  }
  if (self.hasSpeed) {
    hashCode = hashCode * 31 + [[NSNumber numberWithFloat:self.speed] hash];
  }
  hashCode = hashCode * 31 + [self hashExtensionsFrom:1000 to:2000];
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

@interface PositionBuilder()
@property (strong) Position* result;
@end

@implementation PositionBuilder
@synthesize result;
- (id) init {
  if ((self = [super init])) {
    self.result = [[Position alloc] init];
  }
  return self;
}
- (PBExtendableMessage*) internalGetResult {
  return result;
}
- (PositionBuilder*) clear {
  self.result = [[Position alloc] init];
  return self;
}
- (PositionBuilder*) clone {
  return [Position builderWithPrototype:result];
}
- (Position*) defaultInstance {
  return [Position defaultInstance];
}
- (Position*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (Position*) buildPartial {
  Position* returnMe = result;
  self.result = nil;
  return returnMe;
}
- (PositionBuilder*) mergeFrom:(Position*) other {
  if (other == [Position defaultInstance]) {
    return self;
  }
  if (other.hasLatitude) {
    [self setLatitude:other.latitude];
  }
  if (other.hasLongitude) {
    [self setLongitude:other.longitude];
  }
  if (other.hasBearing) {
    [self setBearing:other.bearing];
  }
  if (other.hasOdometer) {
    [self setOdometer:other.odometer];
  }
  if (other.hasSpeed) {
    [self setSpeed:other.speed];
  }
  [self mergeExtensionFields:other];
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (PositionBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (PositionBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSetBuilder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    SInt32 tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 13: {
        [self setLatitude:[input readFloat]];
        break;
      }
      case 21: {
        [self setLongitude:[input readFloat]];
        break;
      }
      case 29: {
        [self setBearing:[input readFloat]];
        break;
      }
      case 33: {
        [self setOdometer:[input readDouble]];
        break;
      }
      case 45: {
        [self setSpeed:[input readFloat]];
        break;
      }
    }
  }
}
- (BOOL) hasLatitude {
  return result.hasLatitude;
}
- (Float32) latitude {
  return result.latitude;
}
- (PositionBuilder*) setLatitude:(Float32) value {
  result.hasLatitude = YES;
  result.latitude = value;
  return self;
}
- (PositionBuilder*) clearLatitude {
  result.hasLatitude = NO;
  result.latitude = 0;
  return self;
}
- (BOOL) hasLongitude {
  return result.hasLongitude;
}
- (Float32) longitude {
  return result.longitude;
}
- (PositionBuilder*) setLongitude:(Float32) value {
  result.hasLongitude = YES;
  result.longitude = value;
  return self;
}
- (PositionBuilder*) clearLongitude {
  result.hasLongitude = NO;
  result.longitude = 0;
  return self;
}
- (BOOL) hasBearing {
  return result.hasBearing;
}
- (Float32) bearing {
  return result.bearing;
}
- (PositionBuilder*) setBearing:(Float32) value {
  result.hasBearing = YES;
  result.bearing = value;
  return self;
}
- (PositionBuilder*) clearBearing {
  result.hasBearing = NO;
  result.bearing = 0;
  return self;
}
- (BOOL) hasOdometer {
  return result.hasOdometer;
}
- (Float64) odometer {
  return result.odometer;
}
- (PositionBuilder*) setOdometer:(Float64) value {
  result.hasOdometer = YES;
  result.odometer = value;
  return self;
}
- (PositionBuilder*) clearOdometer {
  result.hasOdometer = NO;
  result.odometer = 0;
  return self;
}
- (BOOL) hasSpeed {
  return result.hasSpeed;
}
- (Float32) speed {
  return result.speed;
}
- (PositionBuilder*) setSpeed:(Float32) value {
  result.hasSpeed = YES;
  result.speed = value;
  return self;
}
- (PositionBuilder*) clearSpeed {
  result.hasSpeed = NO;
  result.speed = 0;
  return self;
}
@end

@interface TripDescriptor ()
@property (strong) NSString* tripId;
@property (strong) NSString* routeId;
@property (strong) NSString* startTime;
@property (strong) NSString* startDate;
@property TripDescriptorScheduleRelationship scheduleRelationship;
@end

@implementation TripDescriptor

- (BOOL) hasTripId {
  return !!hasTripId_;
}
- (void) setHasTripId:(BOOL) value_ {
  hasTripId_ = !!value_;
}
@synthesize tripId;
- (BOOL) hasRouteId {
  return !!hasRouteId_;
}
- (void) setHasRouteId:(BOOL) value_ {
  hasRouteId_ = !!value_;
}
@synthesize routeId;
- (BOOL) hasStartTime {
  return !!hasStartTime_;
}
- (void) setHasStartTime:(BOOL) value_ {
  hasStartTime_ = !!value_;
}
@synthesize startTime;
- (BOOL) hasStartDate {
  return !!hasStartDate_;
}
- (void) setHasStartDate:(BOOL) value_ {
  hasStartDate_ = !!value_;
}
@synthesize startDate;
- (BOOL) hasScheduleRelationship {
  return !!hasScheduleRelationship_;
}
- (void) setHasScheduleRelationship:(BOOL) value_ {
  hasScheduleRelationship_ = !!value_;
}
@synthesize scheduleRelationship;
- (id) init {
  if ((self = [super init])) {
    self.tripId = @"";
    self.routeId = @"";
    self.startTime = @"";
    self.startDate = @"";
    self.scheduleRelationship = TripDescriptorScheduleRelationshipScheduled;
  }
  return self;
}
static TripDescriptor* defaultTripDescriptorInstance = nil;
+ (void) initialize {
  if (self == [TripDescriptor class]) {
    defaultTripDescriptorInstance = [[TripDescriptor alloc] init];
  }
}
+ (TripDescriptor*) defaultInstance {
  return defaultTripDescriptorInstance;
}
- (TripDescriptor*) defaultInstance {
  return defaultTripDescriptorInstance;
}
- (BOOL) isInitialized {
  if (!self.extensionsAreInitialized) {
    return NO;
  }
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasTripId) {
    [output writeString:1 value:self.tripId];
  }
  if (self.hasStartTime) {
    [output writeString:2 value:self.startTime];
  }
  if (self.hasStartDate) {
    [output writeString:3 value:self.startDate];
  }
  if (self.hasScheduleRelationship) {
    [output writeEnum:4 value:self.scheduleRelationship];
  }
  if (self.hasRouteId) {
    [output writeString:5 value:self.routeId];
  }
  [self writeExtensionsToCodedOutputStream:output
                                      from:1000
                                        to:2000];
  [self.unknownFields writeToCodedOutputStream:output];
}
- (SInt32) serializedSize {
  __block SInt32 size_ = memoizedSerializedSize;
  if (size_ != -1) {
    return size_;
  }

  size_ = 0;
  if (self.hasTripId) {
    size_ += computeStringSize(1, self.tripId);
  }
  if (self.hasStartTime) {
    size_ += computeStringSize(2, self.startTime);
  }
  if (self.hasStartDate) {
    size_ += computeStringSize(3, self.startDate);
  }
  if (self.hasScheduleRelationship) {
    size_ += computeEnumSize(4, self.scheduleRelationship);
  }
  if (self.hasRouteId) {
    size_ += computeStringSize(5, self.routeId);
  }
  size_ += [self extensionsSerializedSize];
  size_ += self.unknownFields.serializedSize;
  memoizedSerializedSize = size_;
  return size_;
}
+ (TripDescriptor*) parseFromData:(NSData*) data {
  return (TripDescriptor*)[[[TripDescriptor builder] mergeFromData:data] build];
}
+ (TripDescriptor*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (TripDescriptor*)[[[TripDescriptor builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (TripDescriptor*) parseFromInputStream:(NSInputStream*) input {
  return (TripDescriptor*)[[[TripDescriptor builder] mergeFromInputStream:input] build];
}
+ (TripDescriptor*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (TripDescriptor*)[[[TripDescriptor builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (TripDescriptor*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (TripDescriptor*)[[[TripDescriptor builder] mergeFromCodedInputStream:input] build];
}
+ (TripDescriptor*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (TripDescriptor*)[[[TripDescriptor builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (TripDescriptorBuilder*) builder {
  return [[TripDescriptorBuilder alloc] init];
}
+ (TripDescriptorBuilder*) builderWithPrototype:(TripDescriptor*) prototype {
  return [[TripDescriptor builder] mergeFrom:prototype];
}
- (TripDescriptorBuilder*) builder {
  return [TripDescriptor builder];
}
- (TripDescriptorBuilder*) toBuilder {
  return [TripDescriptor builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  if (self.hasTripId) {
    [output appendFormat:@"%@%@: %@\n", indent, @"tripId", self.tripId];
  }
  if (self.hasStartTime) {
    [output appendFormat:@"%@%@: %@\n", indent, @"startTime", self.startTime];
  }
  if (self.hasStartDate) {
    [output appendFormat:@"%@%@: %@\n", indent, @"startDate", self.startDate];
  }
  if (self.hasScheduleRelationship) {
    [output appendFormat:@"%@%@: %d\n", indent, @"scheduleRelationship", self.scheduleRelationship];
  }
  if (self.hasRouteId) {
    [output appendFormat:@"%@%@: %@\n", indent, @"routeId", self.routeId];
  }
  [self writeExtensionDescriptionToMutableString:(NSMutableString*)output
                                            from:1000
                                              to:2000
                                      withIndent:indent];
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[TripDescriptor class]]) {
    return NO;
  }
  TripDescriptor *otherMessage = other;
  return
      self.hasTripId == otherMessage.hasTripId &&
      (!self.hasTripId || [self.tripId isEqual:otherMessage.tripId]) &&
      self.hasStartTime == otherMessage.hasStartTime &&
      (!self.hasStartTime || [self.startTime isEqual:otherMessage.startTime]) &&
      self.hasStartDate == otherMessage.hasStartDate &&
      (!self.hasStartDate || [self.startDate isEqual:otherMessage.startDate]) &&
      self.hasScheduleRelationship == otherMessage.hasScheduleRelationship &&
      (!self.hasScheduleRelationship || self.scheduleRelationship == otherMessage.scheduleRelationship) &&
      self.hasRouteId == otherMessage.hasRouteId &&
      (!self.hasRouteId || [self.routeId isEqual:otherMessage.routeId]) &&
      [self isEqualExtensionsInOther:otherMessage from:1000 to:2000] &&

      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  __block NSUInteger hashCode = 7;
  if (self.hasTripId) {
    hashCode = hashCode * 31 + [self.tripId hash];
  }
  if (self.hasStartTime) {
    hashCode = hashCode * 31 + [self.startTime hash];
  }
  if (self.hasStartDate) {
    hashCode = hashCode * 31 + [self.startDate hash];
  }
  if (self.hasScheduleRelationship) {
    hashCode = hashCode * 31 + self.scheduleRelationship;
  }
  if (self.hasRouteId) {
    hashCode = hashCode * 31 + [self.routeId hash];
  }
  hashCode = hashCode * 31 + [self hashExtensionsFrom:1000 to:2000];
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

BOOL TripDescriptorScheduleRelationshipIsValidValue(TripDescriptorScheduleRelationship value) {
  switch (value) {
    case TripDescriptorScheduleRelationshipScheduled:
    case TripDescriptorScheduleRelationshipAdded:
    case TripDescriptorScheduleRelationshipUnscheduled:
    case TripDescriptorScheduleRelationshipCanceled:
      return YES;
    default:
      return NO;
  }
}
@interface TripDescriptorBuilder()
@property (strong) TripDescriptor* result;
@end

@implementation TripDescriptorBuilder
@synthesize result;
- (id) init {
  if ((self = [super init])) {
    self.result = [[TripDescriptor alloc] init];
  }
  return self;
}
- (PBExtendableMessage*) internalGetResult {
  return result;
}
- (TripDescriptorBuilder*) clear {
  self.result = [[TripDescriptor alloc] init];
  return self;
}
- (TripDescriptorBuilder*) clone {
  return [TripDescriptor builderWithPrototype:result];
}
- (TripDescriptor*) defaultInstance {
  return [TripDescriptor defaultInstance];
}
- (TripDescriptor*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (TripDescriptor*) buildPartial {
  TripDescriptor* returnMe = result;
  self.result = nil;
  return returnMe;
}
- (TripDescriptorBuilder*) mergeFrom:(TripDescriptor*) other {
  if (other == [TripDescriptor defaultInstance]) {
    return self;
  }
  if (other.hasTripId) {
    [self setTripId:other.tripId];
  }
  if (other.hasRouteId) {
    [self setRouteId:other.routeId];
  }
  if (other.hasStartTime) {
    [self setStartTime:other.startTime];
  }
  if (other.hasStartDate) {
    [self setStartDate:other.startDate];
  }
  if (other.hasScheduleRelationship) {
    [self setScheduleRelationship:other.scheduleRelationship];
  }
  [self mergeExtensionFields:other];
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (TripDescriptorBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (TripDescriptorBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSetBuilder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    SInt32 tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 10: {
        [self setTripId:[input readString]];
        break;
      }
      case 18: {
        [self setStartTime:[input readString]];
        break;
      }
      case 26: {
        [self setStartDate:[input readString]];
        break;
      }
      case 32: {
        TripDescriptorScheduleRelationship value = (TripDescriptorScheduleRelationship)[input readEnum];
        if (TripDescriptorScheduleRelationshipIsValidValue(value)) {
          [self setScheduleRelationship:value];
        } else {
          [unknownFields mergeVarintField:4 value:value];
        }
        break;
      }
      case 42: {
        [self setRouteId:[input readString]];
        break;
      }
    }
  }
}
- (BOOL) hasTripId {
  return result.hasTripId;
}
- (NSString*) tripId {
  return result.tripId;
}
- (TripDescriptorBuilder*) setTripId:(NSString*) value {
  result.hasTripId = YES;
  result.tripId = value;
  return self;
}
- (TripDescriptorBuilder*) clearTripId {
  result.hasTripId = NO;
  result.tripId = @"";
  return self;
}
- (BOOL) hasRouteId {
  return result.hasRouteId;
}
- (NSString*) routeId {
  return result.routeId;
}
- (TripDescriptorBuilder*) setRouteId:(NSString*) value {
  result.hasRouteId = YES;
  result.routeId = value;
  return self;
}
- (TripDescriptorBuilder*) clearRouteId {
  result.hasRouteId = NO;
  result.routeId = @"";
  return self;
}
- (BOOL) hasStartTime {
  return result.hasStartTime;
}
- (NSString*) startTime {
  return result.startTime;
}
- (TripDescriptorBuilder*) setStartTime:(NSString*) value {
  result.hasStartTime = YES;
  result.startTime = value;
  return self;
}
- (TripDescriptorBuilder*) clearStartTime {
  result.hasStartTime = NO;
  result.startTime = @"";
  return self;
}
- (BOOL) hasStartDate {
  return result.hasStartDate;
}
- (NSString*) startDate {
  return result.startDate;
}
- (TripDescriptorBuilder*) setStartDate:(NSString*) value {
  result.hasStartDate = YES;
  result.startDate = value;
  return self;
}
- (TripDescriptorBuilder*) clearStartDate {
  result.hasStartDate = NO;
  result.startDate = @"";
  return self;
}
- (BOOL) hasScheduleRelationship {
  return result.hasScheduleRelationship;
}
- (TripDescriptorScheduleRelationship) scheduleRelationship {
  return result.scheduleRelationship;
}
- (TripDescriptorBuilder*) setScheduleRelationship:(TripDescriptorScheduleRelationship) value {
  result.hasScheduleRelationship = YES;
  result.scheduleRelationship = value;
  return self;
}
- (TripDescriptorBuilder*) clearScheduleRelationship {
  result.hasScheduleRelationship = NO;
  result.scheduleRelationship = TripDescriptorScheduleRelationshipScheduled;
  return self;
}
@end

@interface VehicleDescriptor ()
@property (strong) NSString* id;
@property (strong) NSString* label;
@property (strong) NSString* licensePlate;
@end

@implementation VehicleDescriptor

- (BOOL) hasId {
  return !!hasId_;
}
- (void) setHasId:(BOOL) value_ {
  hasId_ = !!value_;
}
@synthesize id;
- (BOOL) hasLabel {
  return !!hasLabel_;
}
- (void) setHasLabel:(BOOL) value_ {
  hasLabel_ = !!value_;
}
@synthesize label;
- (BOOL) hasLicensePlate {
  return !!hasLicensePlate_;
}
- (void) setHasLicensePlate:(BOOL) value_ {
  hasLicensePlate_ = !!value_;
}
@synthesize licensePlate;
- (id) init {
  if ((self = [super init])) {
    self.id = @"";
    self.label = @"";
    self.licensePlate = @"";
  }
  return self;
}
static VehicleDescriptor* defaultVehicleDescriptorInstance = nil;
+ (void) initialize {
  if (self == [VehicleDescriptor class]) {
    defaultVehicleDescriptorInstance = [[VehicleDescriptor alloc] init];
  }
}
+ (VehicleDescriptor*) defaultInstance {
  return defaultVehicleDescriptorInstance;
}
- (VehicleDescriptor*) defaultInstance {
  return defaultVehicleDescriptorInstance;
}
- (BOOL) isInitialized {
  if (!self.extensionsAreInitialized) {
    return NO;
  }
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasId) {
    [output writeString:1 value:self.id];
  }
  if (self.hasLabel) {
    [output writeString:2 value:self.label];
  }
  if (self.hasLicensePlate) {
    [output writeString:3 value:self.licensePlate];
  }
  [self writeExtensionsToCodedOutputStream:output
                                      from:1000
                                        to:2000];
  [self.unknownFields writeToCodedOutputStream:output];
}
- (SInt32) serializedSize {
  __block SInt32 size_ = memoizedSerializedSize;
  if (size_ != -1) {
    return size_;
  }

  size_ = 0;
  if (self.hasId) {
    size_ += computeStringSize(1, self.id);
  }
  if (self.hasLabel) {
    size_ += computeStringSize(2, self.label);
  }
  if (self.hasLicensePlate) {
    size_ += computeStringSize(3, self.licensePlate);
  }
  size_ += [self extensionsSerializedSize];
  size_ += self.unknownFields.serializedSize;
  memoizedSerializedSize = size_;
  return size_;
}
+ (VehicleDescriptor*) parseFromData:(NSData*) data {
  return (VehicleDescriptor*)[[[VehicleDescriptor builder] mergeFromData:data] build];
}
+ (VehicleDescriptor*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (VehicleDescriptor*)[[[VehicleDescriptor builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (VehicleDescriptor*) parseFromInputStream:(NSInputStream*) input {
  return (VehicleDescriptor*)[[[VehicleDescriptor builder] mergeFromInputStream:input] build];
}
+ (VehicleDescriptor*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (VehicleDescriptor*)[[[VehicleDescriptor builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (VehicleDescriptor*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (VehicleDescriptor*)[[[VehicleDescriptor builder] mergeFromCodedInputStream:input] build];
}
+ (VehicleDescriptor*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (VehicleDescriptor*)[[[VehicleDescriptor builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (VehicleDescriptorBuilder*) builder {
  return [[VehicleDescriptorBuilder alloc] init];
}
+ (VehicleDescriptorBuilder*) builderWithPrototype:(VehicleDescriptor*) prototype {
  return [[VehicleDescriptor builder] mergeFrom:prototype];
}
- (VehicleDescriptorBuilder*) builder {
  return [VehicleDescriptor builder];
}
- (VehicleDescriptorBuilder*) toBuilder {
  return [VehicleDescriptor builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  if (self.hasId) {
    [output appendFormat:@"%@%@: %@\n", indent, @"id", self.id];
  }
  if (self.hasLabel) {
    [output appendFormat:@"%@%@: %@\n", indent, @"label", self.label];
  }
  if (self.hasLicensePlate) {
    [output appendFormat:@"%@%@: %@\n", indent, @"licensePlate", self.licensePlate];
  }
  [self writeExtensionDescriptionToMutableString:(NSMutableString*)output
                                            from:1000
                                              to:2000
                                      withIndent:indent];
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[VehicleDescriptor class]]) {
    return NO;
  }
  VehicleDescriptor *otherMessage = other;
  return
      self.hasId == otherMessage.hasId &&
      (!self.hasId || [self.id isEqual:otherMessage.id]) &&
      self.hasLabel == otherMessage.hasLabel &&
      (!self.hasLabel || [self.label isEqual:otherMessage.label]) &&
      self.hasLicensePlate == otherMessage.hasLicensePlate &&
      (!self.hasLicensePlate || [self.licensePlate isEqual:otherMessage.licensePlate]) &&
      [self isEqualExtensionsInOther:otherMessage from:1000 to:2000] &&

      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  __block NSUInteger hashCode = 7;
  if (self.hasId) {
    hashCode = hashCode * 31 + [self.id hash];
  }
  if (self.hasLabel) {
    hashCode = hashCode * 31 + [self.label hash];
  }
  if (self.hasLicensePlate) {
    hashCode = hashCode * 31 + [self.licensePlate hash];
  }
  hashCode = hashCode * 31 + [self hashExtensionsFrom:1000 to:2000];
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

@interface VehicleDescriptorBuilder()
@property (strong) VehicleDescriptor* result;
@end

@implementation VehicleDescriptorBuilder
@synthesize result;
- (id) init {
  if ((self = [super init])) {
    self.result = [[VehicleDescriptor alloc] init];
  }
  return self;
}
- (PBExtendableMessage*) internalGetResult {
  return result;
}
- (VehicleDescriptorBuilder*) clear {
  self.result = [[VehicleDescriptor alloc] init];
  return self;
}
- (VehicleDescriptorBuilder*) clone {
  return [VehicleDescriptor builderWithPrototype:result];
}
- (VehicleDescriptor*) defaultInstance {
  return [VehicleDescriptor defaultInstance];
}
- (VehicleDescriptor*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (VehicleDescriptor*) buildPartial {
  VehicleDescriptor* returnMe = result;
  self.result = nil;
  return returnMe;
}
- (VehicleDescriptorBuilder*) mergeFrom:(VehicleDescriptor*) other {
  if (other == [VehicleDescriptor defaultInstance]) {
    return self;
  }
  if (other.hasId) {
    [self setId:other.id];
  }
  if (other.hasLabel) {
    [self setLabel:other.label];
  }
  if (other.hasLicensePlate) {
    [self setLicensePlate:other.licensePlate];
  }
  [self mergeExtensionFields:other];
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (VehicleDescriptorBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (VehicleDescriptorBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSetBuilder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    SInt32 tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 10: {
        [self setId:[input readString]];
        break;
      }
      case 18: {
        [self setLabel:[input readString]];
        break;
      }
      case 26: {
        [self setLicensePlate:[input readString]];
        break;
      }
    }
  }
}
- (BOOL) hasId {
  return result.hasId;
}
- (NSString*) id {
  return result.id;
}
- (VehicleDescriptorBuilder*) setId:(NSString*) value {
  result.hasId = YES;
  result.id = value;
  return self;
}
- (VehicleDescriptorBuilder*) clearId {
  result.hasId = NO;
  result.id = @"";
  return self;
}
- (BOOL) hasLabel {
  return result.hasLabel;
}
- (NSString*) label {
  return result.label;
}
- (VehicleDescriptorBuilder*) setLabel:(NSString*) value {
  result.hasLabel = YES;
  result.label = value;
  return self;
}
- (VehicleDescriptorBuilder*) clearLabel {
  result.hasLabel = NO;
  result.label = @"";
  return self;
}
- (BOOL) hasLicensePlate {
  return result.hasLicensePlate;
}
- (NSString*) licensePlate {
  return result.licensePlate;
}
- (VehicleDescriptorBuilder*) setLicensePlate:(NSString*) value {
  result.hasLicensePlate = YES;
  result.licensePlate = value;
  return self;
}
- (VehicleDescriptorBuilder*) clearLicensePlate {
  result.hasLicensePlate = NO;
  result.licensePlate = @"";
  return self;
}
@end

@interface EntitySelector ()
@property (strong) NSString* agencyId;
@property (strong) NSString* routeId;
@property SInt32 routeType;
@property (strong) TripDescriptor* trip;
@property (strong) NSString* stopId;
@end

@implementation EntitySelector

- (BOOL) hasAgencyId {
  return !!hasAgencyId_;
}
- (void) setHasAgencyId:(BOOL) value_ {
  hasAgencyId_ = !!value_;
}
@synthesize agencyId;
- (BOOL) hasRouteId {
  return !!hasRouteId_;
}
- (void) setHasRouteId:(BOOL) value_ {
  hasRouteId_ = !!value_;
}
@synthesize routeId;
- (BOOL) hasRouteType {
  return !!hasRouteType_;
}
- (void) setHasRouteType:(BOOL) value_ {
  hasRouteType_ = !!value_;
}
@synthesize routeType;
- (BOOL) hasTrip {
  return !!hasTrip_;
}
- (void) setHasTrip:(BOOL) value_ {
  hasTrip_ = !!value_;
}
@synthesize trip;
- (BOOL) hasStopId {
  return !!hasStopId_;
}
- (void) setHasStopId:(BOOL) value_ {
  hasStopId_ = !!value_;
}
@synthesize stopId;
- (id) init {
  if ((self = [super init])) {
    self.agencyId = @"";
    self.routeId = @"";
    self.routeType = 0;
    self.trip = [TripDescriptor defaultInstance];
    self.stopId = @"";
  }
  return self;
}
static EntitySelector* defaultEntitySelectorInstance = nil;
+ (void) initialize {
  if (self == [EntitySelector class]) {
    defaultEntitySelectorInstance = [[EntitySelector alloc] init];
  }
}
+ (EntitySelector*) defaultInstance {
  return defaultEntitySelectorInstance;
}
- (EntitySelector*) defaultInstance {
  return defaultEntitySelectorInstance;
}
- (BOOL) isInitialized {
  if (self.hasTrip) {
    if (!self.trip.isInitialized) {
      return NO;
    }
  }
  if (!self.extensionsAreInitialized) {
    return NO;
  }
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasAgencyId) {
    [output writeString:1 value:self.agencyId];
  }
  if (self.hasRouteId) {
    [output writeString:2 value:self.routeId];
  }
  if (self.hasRouteType) {
    [output writeInt32:3 value:self.routeType];
  }
  if (self.hasTrip) {
    [output writeMessage:4 value:self.trip];
  }
  if (self.hasStopId) {
    [output writeString:5 value:self.stopId];
  }
  [self writeExtensionsToCodedOutputStream:output
                                      from:1000
                                        to:2000];
  [self.unknownFields writeToCodedOutputStream:output];
}
- (SInt32) serializedSize {
  __block SInt32 size_ = memoizedSerializedSize;
  if (size_ != -1) {
    return size_;
  }

  size_ = 0;
  if (self.hasAgencyId) {
    size_ += computeStringSize(1, self.agencyId);
  }
  if (self.hasRouteId) {
    size_ += computeStringSize(2, self.routeId);
  }
  if (self.hasRouteType) {
    size_ += computeInt32Size(3, self.routeType);
  }
  if (self.hasTrip) {
    size_ += computeMessageSize(4, self.trip);
  }
  if (self.hasStopId) {
    size_ += computeStringSize(5, self.stopId);
  }
  size_ += [self extensionsSerializedSize];
  size_ += self.unknownFields.serializedSize;
  memoizedSerializedSize = size_;
  return size_;
}
+ (EntitySelector*) parseFromData:(NSData*) data {
  return (EntitySelector*)[[[EntitySelector builder] mergeFromData:data] build];
}
+ (EntitySelector*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (EntitySelector*)[[[EntitySelector builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (EntitySelector*) parseFromInputStream:(NSInputStream*) input {
  return (EntitySelector*)[[[EntitySelector builder] mergeFromInputStream:input] build];
}
+ (EntitySelector*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (EntitySelector*)[[[EntitySelector builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (EntitySelector*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (EntitySelector*)[[[EntitySelector builder] mergeFromCodedInputStream:input] build];
}
+ (EntitySelector*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (EntitySelector*)[[[EntitySelector builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (EntitySelectorBuilder*) builder {
  return [[EntitySelectorBuilder alloc] init];
}
+ (EntitySelectorBuilder*) builderWithPrototype:(EntitySelector*) prototype {
  return [[EntitySelector builder] mergeFrom:prototype];
}
- (EntitySelectorBuilder*) builder {
  return [EntitySelector builder];
}
- (EntitySelectorBuilder*) toBuilder {
  return [EntitySelector builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  if (self.hasAgencyId) {
    [output appendFormat:@"%@%@: %@\n", indent, @"agencyId", self.agencyId];
  }
  if (self.hasRouteId) {
    [output appendFormat:@"%@%@: %@\n", indent, @"routeId", self.routeId];
  }
  if (self.hasRouteType) {
    [output appendFormat:@"%@%@: %@\n", indent, @"routeType", [NSNumber numberWithInteger:self.routeType]];
  }
  if (self.hasTrip) {
    [output appendFormat:@"%@%@ {\n", indent, @"trip"];
    [self.trip writeDescriptionTo:output
                         withIndent:[NSString stringWithFormat:@"%@  ", indent]];
    [output appendFormat:@"%@}\n", indent];
  }
  if (self.hasStopId) {
    [output appendFormat:@"%@%@: %@\n", indent, @"stopId", self.stopId];
  }
  [self writeExtensionDescriptionToMutableString:(NSMutableString*)output
                                            from:1000
                                              to:2000
                                      withIndent:indent];
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[EntitySelector class]]) {
    return NO;
  }
  EntitySelector *otherMessage = other;
  return
      self.hasAgencyId == otherMessage.hasAgencyId &&
      (!self.hasAgencyId || [self.agencyId isEqual:otherMessage.agencyId]) &&
      self.hasRouteId == otherMessage.hasRouteId &&
      (!self.hasRouteId || [self.routeId isEqual:otherMessage.routeId]) &&
      self.hasRouteType == otherMessage.hasRouteType &&
      (!self.hasRouteType || self.routeType == otherMessage.routeType) &&
      self.hasTrip == otherMessage.hasTrip &&
      (!self.hasTrip || [self.trip isEqual:otherMessage.trip]) &&
      self.hasStopId == otherMessage.hasStopId &&
      (!self.hasStopId || [self.stopId isEqual:otherMessage.stopId]) &&
      [self isEqualExtensionsInOther:otherMessage from:1000 to:2000] &&

      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  __block NSUInteger hashCode = 7;
  if (self.hasAgencyId) {
    hashCode = hashCode * 31 + [self.agencyId hash];
  }
  if (self.hasRouteId) {
    hashCode = hashCode * 31 + [self.routeId hash];
  }
  if (self.hasRouteType) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInteger:self.routeType] hash];
  }
  if (self.hasTrip) {
    hashCode = hashCode * 31 + [self.trip hash];
  }
  if (self.hasStopId) {
    hashCode = hashCode * 31 + [self.stopId hash];
  }
  hashCode = hashCode * 31 + [self hashExtensionsFrom:1000 to:2000];
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

@interface EntitySelectorBuilder()
@property (strong) EntitySelector* result;
@end

@implementation EntitySelectorBuilder
@synthesize result;
- (id) init {
  if ((self = [super init])) {
    self.result = [[EntitySelector alloc] init];
  }
  return self;
}
- (PBExtendableMessage*) internalGetResult {
  return result;
}
- (EntitySelectorBuilder*) clear {
  self.result = [[EntitySelector alloc] init];
  return self;
}
- (EntitySelectorBuilder*) clone {
  return [EntitySelector builderWithPrototype:result];
}
- (EntitySelector*) defaultInstance {
  return [EntitySelector defaultInstance];
}
- (EntitySelector*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (EntitySelector*) buildPartial {
  EntitySelector* returnMe = result;
  self.result = nil;
  return returnMe;
}
- (EntitySelectorBuilder*) mergeFrom:(EntitySelector*) other {
  if (other == [EntitySelector defaultInstance]) {
    return self;
  }
  if (other.hasAgencyId) {
    [self setAgencyId:other.agencyId];
  }
  if (other.hasRouteId) {
    [self setRouteId:other.routeId];
  }
  if (other.hasRouteType) {
    [self setRouteType:other.routeType];
  }
  if (other.hasTrip) {
    [self mergeTrip:other.trip];
  }
  if (other.hasStopId) {
    [self setStopId:other.stopId];
  }
  [self mergeExtensionFields:other];
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (EntitySelectorBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (EntitySelectorBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSetBuilder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    SInt32 tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 10: {
        [self setAgencyId:[input readString]];
        break;
      }
      case 18: {
        [self setRouteId:[input readString]];
        break;
      }
      case 24: {
        [self setRouteType:[input readInt32]];
        break;
      }
      case 34: {
        TripDescriptorBuilder* subBuilder = [TripDescriptor builder];
        if (self.hasTrip) {
          [subBuilder mergeFrom:self.trip];
        }
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self setTrip:[subBuilder buildPartial]];
        break;
      }
      case 42: {
        [self setStopId:[input readString]];
        break;
      }
    }
  }
}
- (BOOL) hasAgencyId {
  return result.hasAgencyId;
}
- (NSString*) agencyId {
  return result.agencyId;
}
- (EntitySelectorBuilder*) setAgencyId:(NSString*) value {
  result.hasAgencyId = YES;
  result.agencyId = value;
  return self;
}
- (EntitySelectorBuilder*) clearAgencyId {
  result.hasAgencyId = NO;
  result.agencyId = @"";
  return self;
}
- (BOOL) hasRouteId {
  return result.hasRouteId;
}
- (NSString*) routeId {
  return result.routeId;
}
- (EntitySelectorBuilder*) setRouteId:(NSString*) value {
  result.hasRouteId = YES;
  result.routeId = value;
  return self;
}
- (EntitySelectorBuilder*) clearRouteId {
  result.hasRouteId = NO;
  result.routeId = @"";
  return self;
}
- (BOOL) hasRouteType {
  return result.hasRouteType;
}
- (SInt32) routeType {
  return result.routeType;
}
- (EntitySelectorBuilder*) setRouteType:(SInt32) value {
  result.hasRouteType = YES;
  result.routeType = value;
  return self;
}
- (EntitySelectorBuilder*) clearRouteType {
  result.hasRouteType = NO;
  result.routeType = 0;
  return self;
}
- (BOOL) hasTrip {
  return result.hasTrip;
}
- (TripDescriptor*) trip {
  return result.trip;
}
- (EntitySelectorBuilder*) setTrip:(TripDescriptor*) value {
  result.hasTrip = YES;
  result.trip = value;
  return self;
}
- (EntitySelectorBuilder*) setTripBuilder:(TripDescriptorBuilder*) builderForValue {
  return [self setTrip:[builderForValue build]];
}
- (EntitySelectorBuilder*) mergeTrip:(TripDescriptor*) value {
  if (result.hasTrip &&
      result.trip != [TripDescriptor defaultInstance]) {
    result.trip =
      [[[TripDescriptor builderWithPrototype:result.trip] mergeFrom:value] buildPartial];
  } else {
    result.trip = value;
  }
  result.hasTrip = YES;
  return self;
}
- (EntitySelectorBuilder*) clearTrip {
  result.hasTrip = NO;
  result.trip = [TripDescriptor defaultInstance];
  return self;
}
- (BOOL) hasStopId {
  return result.hasStopId;
}
- (NSString*) stopId {
  return result.stopId;
}
- (EntitySelectorBuilder*) setStopId:(NSString*) value {
  result.hasStopId = YES;
  result.stopId = value;
  return self;
}
- (EntitySelectorBuilder*) clearStopId {
  result.hasStopId = NO;
  result.stopId = @"";
  return self;
}
@end

@interface TranslatedString ()
@property (strong) NSMutableArray * translationArray;
@end

@implementation TranslatedString

@synthesize translationArray;
@dynamic translation;
- (id) init {
  if ((self = [super init])) {
  }
  return self;
}
static TranslatedString* defaultTranslatedStringInstance = nil;
+ (void) initialize {
  if (self == [TranslatedString class]) {
    defaultTranslatedStringInstance = [[TranslatedString alloc] init];
  }
}
+ (TranslatedString*) defaultInstance {
  return defaultTranslatedStringInstance;
}
- (TranslatedString*) defaultInstance {
  return defaultTranslatedStringInstance;
}
- (NSArray *)translation {
  return translationArray;
}
- (TranslatedStringTranslation*)translationAtIndex:(NSUInteger)index {
  return [translationArray objectAtIndex:index];
}
- (BOOL) isInitialized {
  __block BOOL isInittranslation = YES;
   [self.translation enumerateObjectsUsingBlock:^(TranslatedStringTranslation *element, NSUInteger idx, BOOL *stop) {
    if (!element.isInitialized) {
      isInittranslation = NO;
      *stop = YES;
    }
  }];
  if (!isInittranslation) return isInittranslation;
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  [self.translationArray enumerateObjectsUsingBlock:^(TranslatedStringTranslation *element, NSUInteger idx, BOOL *stop) {
    [output writeMessage:1 value:element];
  }];
  [self.unknownFields writeToCodedOutputStream:output];
}
- (SInt32) serializedSize {
  __block SInt32 size_ = memoizedSerializedSize;
  if (size_ != -1) {
    return size_;
  }

  size_ = 0;
  [self.translationArray enumerateObjectsUsingBlock:^(TranslatedStringTranslation *element, NSUInteger idx, BOOL *stop) {
    size_ += computeMessageSize(1, element);
  }];
  size_ += self.unknownFields.serializedSize;
  memoizedSerializedSize = size_;
  return size_;
}
+ (TranslatedString*) parseFromData:(NSData*) data {
  return (TranslatedString*)[[[TranslatedString builder] mergeFromData:data] build];
}
+ (TranslatedString*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (TranslatedString*)[[[TranslatedString builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (TranslatedString*) parseFromInputStream:(NSInputStream*) input {
  return (TranslatedString*)[[[TranslatedString builder] mergeFromInputStream:input] build];
}
+ (TranslatedString*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (TranslatedString*)[[[TranslatedString builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (TranslatedString*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (TranslatedString*)[[[TranslatedString builder] mergeFromCodedInputStream:input] build];
}
+ (TranslatedString*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (TranslatedString*)[[[TranslatedString builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (TranslatedStringBuilder*) builder {
  return [[TranslatedStringBuilder alloc] init];
}
+ (TranslatedStringBuilder*) builderWithPrototype:(TranslatedString*) prototype {
  return [[TranslatedString builder] mergeFrom:prototype];
}
- (TranslatedStringBuilder*) builder {
  return [TranslatedString builder];
}
- (TranslatedStringBuilder*) toBuilder {
  return [TranslatedString builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  [self.translationArray enumerateObjectsUsingBlock:^(TranslatedStringTranslation *element, NSUInteger idx, BOOL *stop) {
    [output appendFormat:@"%@%@ {\n", indent, @"translation"];
    [element writeDescriptionTo:output
                     withIndent:[NSString stringWithFormat:@"%@  ", indent]];
    [output appendFormat:@"%@}\n", indent];
  }];
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[TranslatedString class]]) {
    return NO;
  }
  TranslatedString *otherMessage = other;
  return
      [self.translationArray isEqualToArray:otherMessage.translationArray] &&
      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  __block NSUInteger hashCode = 7;
  [self.translationArray enumerateObjectsUsingBlock:^(TranslatedStringTranslation *element, NSUInteger idx, BOOL *stop) {
    hashCode = hashCode * 31 + [element hash];
  }];
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

@interface TranslatedStringTranslation ()
@property (strong) NSString* text;
@property (strong) NSString* language;
@end

@implementation TranslatedStringTranslation

- (BOOL) hasText {
  return !!hasText_;
}
- (void) setHasText:(BOOL) value_ {
  hasText_ = !!value_;
}
@synthesize text;
- (BOOL) hasLanguage {
  return !!hasLanguage_;
}
- (void) setHasLanguage:(BOOL) value_ {
  hasLanguage_ = !!value_;
}
@synthesize language;
- (id) init {
  if ((self = [super init])) {
    self.text = @"";
    self.language = @"";
  }
  return self;
}
static TranslatedStringTranslation* defaultTranslatedStringTranslationInstance = nil;
+ (void) initialize {
  if (self == [TranslatedStringTranslation class]) {
    defaultTranslatedStringTranslationInstance = [[TranslatedStringTranslation alloc] init];
  }
}
+ (TranslatedStringTranslation*) defaultInstance {
  return defaultTranslatedStringTranslationInstance;
}
- (TranslatedStringTranslation*) defaultInstance {
  return defaultTranslatedStringTranslationInstance;
}
- (BOOL) isInitialized {
  if (!self.hasText) {
    return NO;
  }
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasText) {
    [output writeString:1 value:self.text];
  }
  if (self.hasLanguage) {
    [output writeString:2 value:self.language];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (SInt32) serializedSize {
  __block SInt32 size_ = memoizedSerializedSize;
  if (size_ != -1) {
    return size_;
  }

  size_ = 0;
  if (self.hasText) {
    size_ += computeStringSize(1, self.text);
  }
  if (self.hasLanguage) {
    size_ += computeStringSize(2, self.language);
  }
  size_ += self.unknownFields.serializedSize;
  memoizedSerializedSize = size_;
  return size_;
}
+ (TranslatedStringTranslation*) parseFromData:(NSData*) data {
  return (TranslatedStringTranslation*)[[[TranslatedStringTranslation builder] mergeFromData:data] build];
}
+ (TranslatedStringTranslation*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (TranslatedStringTranslation*)[[[TranslatedStringTranslation builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (TranslatedStringTranslation*) parseFromInputStream:(NSInputStream*) input {
  return (TranslatedStringTranslation*)[[[TranslatedStringTranslation builder] mergeFromInputStream:input] build];
}
+ (TranslatedStringTranslation*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (TranslatedStringTranslation*)[[[TranslatedStringTranslation builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (TranslatedStringTranslation*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (TranslatedStringTranslation*)[[[TranslatedStringTranslation builder] mergeFromCodedInputStream:input] build];
}
+ (TranslatedStringTranslation*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (TranslatedStringTranslation*)[[[TranslatedStringTranslation builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (TranslatedStringTranslationBuilder*) builder {
  return [[TranslatedStringTranslationBuilder alloc] init];
}
+ (TranslatedStringTranslationBuilder*) builderWithPrototype:(TranslatedStringTranslation*) prototype {
  return [[TranslatedStringTranslation builder] mergeFrom:prototype];
}
- (TranslatedStringTranslationBuilder*) builder {
  return [TranslatedStringTranslation builder];
}
- (TranslatedStringTranslationBuilder*) toBuilder {
  return [TranslatedStringTranslation builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  if (self.hasText) {
    [output appendFormat:@"%@%@: %@\n", indent, @"text", self.text];
  }
  if (self.hasLanguage) {
    [output appendFormat:@"%@%@: %@\n", indent, @"language", self.language];
  }
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[TranslatedStringTranslation class]]) {
    return NO;
  }
  TranslatedStringTranslation *otherMessage = other;
  return
      self.hasText == otherMessage.hasText &&
      (!self.hasText || [self.text isEqual:otherMessage.text]) &&
      self.hasLanguage == otherMessage.hasLanguage &&
      (!self.hasLanguage || [self.language isEqual:otherMessage.language]) &&
      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  __block NSUInteger hashCode = 7;
  if (self.hasText) {
    hashCode = hashCode * 31 + [self.text hash];
  }
  if (self.hasLanguage) {
    hashCode = hashCode * 31 + [self.language hash];
  }
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

@interface TranslatedStringTranslationBuilder()
@property (strong) TranslatedStringTranslation* result;
@end

@implementation TranslatedStringTranslationBuilder
@synthesize result;
- (id) init {
  if ((self = [super init])) {
    self.result = [[TranslatedStringTranslation alloc] init];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return result;
}
- (TranslatedStringTranslationBuilder*) clear {
  self.result = [[TranslatedStringTranslation alloc] init];
  return self;
}
- (TranslatedStringTranslationBuilder*) clone {
  return [TranslatedStringTranslation builderWithPrototype:result];
}
- (TranslatedStringTranslation*) defaultInstance {
  return [TranslatedStringTranslation defaultInstance];
}
- (TranslatedStringTranslation*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (TranslatedStringTranslation*) buildPartial {
  TranslatedStringTranslation* returnMe = result;
  self.result = nil;
  return returnMe;
}
- (TranslatedStringTranslationBuilder*) mergeFrom:(TranslatedStringTranslation*) other {
  if (other == [TranslatedStringTranslation defaultInstance]) {
    return self;
  }
  if (other.hasText) {
    [self setText:other.text];
  }
  if (other.hasLanguage) {
    [self setLanguage:other.language];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (TranslatedStringTranslationBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (TranslatedStringTranslationBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSetBuilder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    SInt32 tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 10: {
        [self setText:[input readString]];
        break;
      }
      case 18: {
        [self setLanguage:[input readString]];
        break;
      }
    }
  }
}
- (BOOL) hasText {
  return result.hasText;
}
- (NSString*) text {
  return result.text;
}
- (TranslatedStringTranslationBuilder*) setText:(NSString*) value {
  result.hasText = YES;
  result.text = value;
  return self;
}
- (TranslatedStringTranslationBuilder*) clearText {
  result.hasText = NO;
  result.text = @"";
  return self;
}
- (BOOL) hasLanguage {
  return result.hasLanguage;
}
- (NSString*) language {
  return result.language;
}
- (TranslatedStringTranslationBuilder*) setLanguage:(NSString*) value {
  result.hasLanguage = YES;
  result.language = value;
  return self;
}
- (TranslatedStringTranslationBuilder*) clearLanguage {
  result.hasLanguage = NO;
  result.language = @"";
  return self;
}
@end

@interface TranslatedStringBuilder()
@property (strong) TranslatedString* result;
@end

@implementation TranslatedStringBuilder
@synthesize result;
- (id) init {
  if ((self = [super init])) {
    self.result = [[TranslatedString alloc] init];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return result;
}
- (TranslatedStringBuilder*) clear {
  self.result = [[TranslatedString alloc] init];
  return self;
}
- (TranslatedStringBuilder*) clone {
  return [TranslatedString builderWithPrototype:result];
}
- (TranslatedString*) defaultInstance {
  return [TranslatedString defaultInstance];
}
- (TranslatedString*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (TranslatedString*) buildPartial {
  TranslatedString* returnMe = result;
  self.result = nil;
  return returnMe;
}
- (TranslatedStringBuilder*) mergeFrom:(TranslatedString*) other {
  if (other == [TranslatedString defaultInstance]) {
    return self;
  }
  if (other.translationArray.count > 0) {
    if (result.translationArray == nil) {
      result.translationArray = [[NSMutableArray alloc] initWithArray:other.translationArray];
    } else {
      [result.translationArray addObjectsFromArray:other.translationArray];
    }
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (TranslatedStringBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (TranslatedStringBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSetBuilder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    SInt32 tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 10: {
        TranslatedStringTranslationBuilder* subBuilder = [TranslatedStringTranslation builder];
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self addTranslation:[subBuilder buildPartial]];
        break;
      }
    }
  }
}
- (NSMutableArray *)translation {
  return result.translationArray;
}
- (TranslatedStringTranslation*)translationAtIndex:(NSUInteger)index {
  return [result translationAtIndex:index];
}
- (TranslatedStringBuilder *)addTranslation:(TranslatedStringTranslation*)value {
  if (result.translationArray == nil) {
    result.translationArray = [[NSMutableArray alloc]init];
  }
  [result.translationArray addObject:value];
  return self;
}
- (TranslatedStringBuilder *)setTranslationArray:(NSArray *)array {
  result.translationArray = [[NSMutableArray alloc]initWithArray:array];
  return self;
}
- (TranslatedStringBuilder *)clearTranslation {
  result.translationArray = nil;
  return self;
}
@end


// @@protoc_insertion_point(global_scope)
